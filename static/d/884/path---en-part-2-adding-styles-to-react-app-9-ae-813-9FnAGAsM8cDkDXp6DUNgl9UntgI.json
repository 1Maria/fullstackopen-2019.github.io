{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>The appearance of our current application is quite modest. In <a href=\"/en/part0/fundamentals_of_web_apps#exercises\">exercise 0.2</a>, the assignment was to go through Mozilla's <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS tutorial</a>.</p>\n<p>Before we move onto the next part, let's take a look at how we can add styles to a React application. There are several different ways of doing this and we will take a look at the other methods later on. First we will add CSS to our application the old-school way, as a single file without using a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\">CSS preprocessor</a> (this is actually not entirely true as we will learn later on). </p>\n<p>Let's add a new <i>index.css</i> file under the <i>src</i> directory, and then add it to the application by importing it in the <i>index.js</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span></code></pre></div>\n<p>Let's add the following CSS rule to the <i>index.css</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS rules are comprised of <i>selectors</i> and <i>declarations</i>. The selector defines which elements the rule should be applied to. The selector above is <i>h1</i>, which will match all of the <i>h1</i> header tags in our application.</p>\n<p>The declaration sets the <em>color</em> property to the value <i>green</i>.</p>\n<p>One CSS rule can contain an arbitrary number of properties. Let's modify the previous rule by making the text cursive, by defining the font style as <i>italic</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> italic<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are many ways of matching elements by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">different types of CSS selectors</a>.</p>\n<p>If we want to target our styles e.g. to each note, we could use the selector <i>li</i>, as all of the notes are inside <i>li</i> tags:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Note</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> note<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>important \n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> \n    <span class=\"token punctuation\">:</span> <span class=\"token string\">'make important'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's add the following rule to our style sheet (since my knowledge of elegant web design is close to zero, the styles don't make much sense):</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">li</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using element types for defining CSS rules is slightly problematic. If our application contained other <i>li</i> tags, the same style rule would also be applied to them.</p>\n<p>If we want to apply our style specifically to notes, then it is better to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\">class selectors</a>.</p>\n<p>In regular HTML, classes are defined as the value of the <i>class</i> attribute:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>note<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>some text...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In React we have to use the <a href=\"https://reactjs.org/docs/dom-elements.html#classname\">className</a> attribute instead of the class attribute. With this in mind, let's make the following changes to our <i>Note</i> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Note</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> note<span class=\"token punctuation\">,</span> toggleImportance <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> note<span class=\"token punctuation\">.</span>important \n    <span class=\"token operator\">?</span> <span class=\"token string\">'make not important'</span> \n    <span class=\"token punctuation\">:</span> <span class=\"token string\">'make important'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>li className<span class=\"token operator\">=</span><span class=\"token string\">'note'</span><span class=\"token operator\">></span></span>      <span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span> \n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggleImportance<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Class selectors are defined with the <em>.classname</em> syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.note</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> grey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you now add other <i>li</i> elements to the application, they will not be affected by the style rule above.</p>\n<h3>Improved error message</h3>\n<p>We previously implemented the error message that was displayed when the user tried to toggle the importance of a deleted note with the <em>alert</em> method. Let's implement the error message as its own React component.</p>\n<p>The component is quite simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Notification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the value of the <em>message</em> prop is <em>null</em>, then nothing is rendered to the screen, and in other cases the message gets rendered inside of a div element.</p>\n<p>Let's add a new piece of state called <i>errorMessage</i> to the <i>App</i> component. Let's initialize it with some error message so that we can immediately test our component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some error happened...'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Muistiinpanot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>      \n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          näytä <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'important'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>tallenna<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>      \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then let's add a style rule that suits an error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgrey<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we are ready to add the logic for displaying the error message. Let's change the <em>toggleImportanceOf</em> function in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggleImportanceOf</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> changedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>note<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>changedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>returnedNote <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> note <span class=\"token punctuation\">:</span> returnedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token template-string\"><span class=\"token string\">`muistiinpano '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>note<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' poistettu palvelimelta`</span></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></span>        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the error occurs we add a descriptive error message to the <em>errorMessage</em> state. At the same time we start a timer, that will set the <em>errorMessage</em> state to <em>null</em> after five seconds.</p>\n<p>The result looks like this:</p>\n<picture><img src=\"/static/c06a5dc7a68717e8e4b813141f11a671/14be6/26b.png\" srcset=\"/static/c06a5dc7a68717e8e4b813141f11a671/4cce7/26b.png 200w,\n/static/c06a5dc7a68717e8e4b813141f11a671/bae5f/26b.png 400w,\n/static/c06a5dc7a68717e8e4b813141f11a671/14be6/26b.png 800w,\n/static/c06a5dc7a68717e8e4b813141f11a671/1b35a/26b.png 1200w,\n/static/c06a5dc7a68717e8e4b813141f11a671/d8d79/26b.png 1406w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The code for the current state of our application can be found in the  <i>part2-7</i> branch on <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-7\">github</a>.</p>\n<h3>Inline styles</h3>\n<p>React also makes it possible to write styles directly in the code as so-called <a href=\"https://react-cn.github.io/react/tips/inline-styles.html\">inline styles</a>.</p>\n<p>The idea behind defining inline styles is extremely simple. Any React component or element can be provided with a set of CSS properties as a JavaScript object through the <a href=\"https://reactjs.org/docs/dom-elements.html#style\">style</a> attribute.</p>\n<p>CSS rules are defined slightly differently in JavaScript than in normal CSS files. Let's say that we'd want to give some element a green color, and an italic font with the size of 16 pixels. In CSS it would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> italic<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But as a React inline style object it would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token punctuation\">{</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n  fontStyle<span class=\"token punctuation\">:</span> <span class=\"token string\">'italic'</span><span class=\"token punctuation\">,</span>\n  fontSize<span class=\"token punctuation\">:</span> <span class=\"token number\">16</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every CSS property is defined as a separate property of the JavaScript object. Numeric values for pixels can be simply defined as integers. One of the major differences compared to regular CSS, is that hyphenated (kebab case) CSS properties are written in camelCase.</p>\n<p>Next, we could add a \"bottom block\" to our application by creating a <i>Footer</i> component and define the following inline styles for it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> footerStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n    fontStyle<span class=\"token punctuation\">:</span> <span class=\"token string\">'italic'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token punctuation\">:</span> <span class=\"token number\">16</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>footerStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span>Note app<span class=\"token punctuation\">,</span> Department <span class=\"token keyword\">of</span> Computer Science <span class=\"token number\">2019</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>em<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> \n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Muistiinpanot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token comment\">// ...  </span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inline selectors come with certain limitations. E.g. so-called pseudo selectors can't be used in any straightforward manner.</p>\n<p>Inline styles and some of the other ways of adding styles to React components go completely against the grain of old conventions. Traditionally it was considered a best practice to separate CSS entirely from content (HTML) and functionality (JavaScript). According to the old school of thought, the goal was to write CSS, HTML, and JavaScript into their own separate files.</p>\n<p>The philosophy of React is in fact the polar opposite. Because the separation of CSS, HTML, and JavaScript into separate files never appeared to scale well in larger applications, in React the fundamental principle is to divide the application along the lines of its logical and functional entities.</p>\n<p>The unit of a functional entity is the React component, that defines both the structure expressed through HTML, its functionality defined as JavaScript functions, and also its style in one place, so that the individual components become as independent and reusable as possible.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<h4>2.19: Phonebook step11</h4>\n<p>Use the <a href=\"/osa2/tyylien_lisaaminen_react_sovellukseen#parempi-virheilmoitus\">parempi virheilmoitus</a> example from part 2 as a guide, for showing a notification that lasts for a few seconds when a successful operation is executed (a person is added or a number is changed): </p>\n<picture><img src=\"/static/ad22f894808b00ab1e6ad3e07a6823f9/14be6/27b.png\" srcset=\"/static/ad22f894808b00ab1e6ad3e07a6823f9/4cce7/27b.png 200w,\n/static/ad22f894808b00ab1e6ad3e07a6823f9/bae5f/27b.png 400w,\n/static/ad22f894808b00ab1e6ad3e07a6823f9/14be6/27b.png 800w,\n/static/ad22f894808b00ab1e6ad3e07a6823f9/1b35a/27b.png 1200w,\n/static/ad22f894808b00ab1e6ad3e07a6823f9/97121/27b.png 1394w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>2.20*: Phonebook step12</h4>\n<p>Open your application in two browsers. <strong>If you delete some person from browser 1</strong> a little bit before you try to <i>change the person's phone number</i> from browser 2, you will get the following error message:</p>\n<picture><img src=\"/static/be832524a82a387fb3adddda37eaa149/14be6/29b.png\" srcset=\"/static/be832524a82a387fb3adddda37eaa149/4cce7/29b.png 200w,\n/static/be832524a82a387fb3adddda37eaa149/bae5f/29b.png 400w,\n/static/be832524a82a387fb3adddda37eaa149/14be6/29b.png 800w,\n/static/be832524a82a387fb3adddda37eaa149/1b35a/29b.png 1200w,\n/static/be832524a82a387fb3adddda37eaa149/d20ef/29b.png 1412w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Fix the issue according to the example shown in <a href=\"/osa2/palvelimella_olevan_datan_muokkaaminen#promise-ja-virheet\">promise ja virheet</a> in part 2. Modify the example so that the user is shown a message when the operation does not succeed. The messages shown for successful and unsuccessful events should look different:</p>\n<picture><img src=\"/static/0b5656bc0242e170d61b7690d04ead9e/14be6/28a.png\" srcset=\"/static/0b5656bc0242e170d61b7690d04ead9e/4cce7/28a.png 200w,\n/static/0b5656bc0242e170d61b7690d04ead9e/bae5f/28a.png 400w,\n/static/0b5656bc0242e170d61b7690d04ead9e/14be6/28a.png 800w,\n/static/0b5656bc0242e170d61b7690d04ead9e/1b35a/28a.png 1200w,\n/static/0b5656bc0242e170d61b7690d04ead9e/cbaf6/28a.png 1404w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This was the last exercise of this part of the course. It's time to push your code to GitHub and mark all of your finished exercises to the <a href=\"https://studies.cs.helsinki.fi/fullstackopen2019\">exercise submission system</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-2-8869c2e065a6ae187c633a378e6fa6be.svg"},"part":2,"letter":"e","lang":"en"}}},"pageContext":{"part":2,"letter":"e","lang":"en"}}