{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Last two parts have mainly concentrated on the backend. The frontend does not yet support the user management we implemented to the backend in part 4.</p>\n<p>At the moment the frontend shows existing notes, and lets user change the state of a note from important to not important and vice versa. New notes cannot be added anymore because of the changes made to the backend in part 4. The backend now expects that a token verifying users identity is sent with the new note. </p>\n<p>We'll now implement a part of the required user management functionality to the frontend. Lets begin with user login. Throughout this part we will assume, that new users are not added from the frontend. </p>\n<p>A login form has now been added to the top of the page. The form for adding new notes has also been moved to the top of the list of notes. </p>\n<picture><img src=\"/static/f735fe7db5ad5bbc1413d3ff617c6daa/14be6/1e.png\" srcset=\"/static/f735fe7db5ad5bbc1413d3ff617c6daa/4cce7/1e.png 200w,\n/static/f735fe7db5ad5bbc1413d3ff617c6daa/bae5f/1e.png 400w,\n/static/f735fe7db5ad5bbc1413d3ff617c6daa/14be6/1e.png 800w,\n/static/f735fe7db5ad5bbc1413d3ff617c6daa/1b35a/1e.png 1200w,\n/static/f735fe7db5ad5bbc1413d3ff617c6daa/68961/1e.png 1450w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The code of the <i>App</i> component now looks as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> </span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>initialNotes <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logging in with'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          username</span><span class=\"gatsby-highlight-code-line\">            <span class=\"token operator\">&lt;</span>input</span><span class=\"gatsby-highlight-code-line\">            type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span></span><span class=\"gatsby-highlight-code-line\">            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            name<span class=\"token operator\">=</span><span class=\"token string\">\"Username\"</span></span><span class=\"gatsby-highlight-code-line\">            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">          password</span><span class=\"gatsby-highlight-code-line\">            <span class=\"token operator\">&lt;</span>input</span><span class=\"gatsby-highlight-code-line\">            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span></span><span class=\"gatsby-highlight-code-line\">            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            name<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span></span><span class=\"gatsby-highlight-code-line\">            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Current application code can be found from <a href=\"https://github.com/fullstackopen-2019/part2-notes/tree/part5-1\">github</a>, branch <i>part5-1</i>.</p>\n<p>The login form is handled the same way we handled forms in\n<a href=\"/en/part2/forms\">part 2</a>. The app state has fields for  <i>Username</i> and <i>password</i> to store the data from the form. The form fields have event handlers, which sychronize changes in the field to the state of the <i>App</i> component. The event handlers are simple: An object is given to them as a parameter, and they destructure the field <i>target</i> from the object and save its value to the state.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The method <em>handleLogin</em>, which is  responsible for sending the form, does not yet do anything. </p>\n<p>Logging in is done by sending a HTTP POST -request to server address <i>api/login</i>. Lets separate the code responsible for this request to its own module, to file <i>services/login.js</i>.</p>\n<p>We'll use <i>async/await</i> -syntax instead of promises for the HTTP-request: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/login'</span>\n\n<span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> credentials <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> login <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The method for handling the login can be implemented as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> loginService <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/login'</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> handleLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wrong credentials'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the login is successfull, the form fields are emptied <i>and</i> the server response (including a <i>token</i> and the user details) is saved to the <i>user</i> field of the applications state.</p>\n<p>If the login fails, or running the function <em>loginService.login</em> results in an error, the user is notified. </p>\n<p>User is not notified about successful login in any way. Lets modify the application to show the login form only <i>if the user is not logged in</i> so <em>user === null</em>. The form for adding new notes is shown only if <i>user is logged in</i>, so <i>user</i> contains the user details. </p>\n<p>Lets add two helper functions to the <i>App</i> component for generating the forms: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        username\n          <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n          name<span class=\"token operator\">=</span><span class=\"token string\">\"Username\"</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        password\n          <span class=\"token operator\">&lt;</span>input\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n          value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n          name<span class=\"token operator\">=</span><span class=\"token string\">\"Password\"</span>\n          onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>      \n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>newNote<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleNoteChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>tallenna<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>  \n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and conditionally render them:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span>user <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">noteForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setShowAll</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          näytä <span class=\"token punctuation\">{</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'vain tärkeät'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kaikki'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A slightly weird looking, but commonly used <a href=\"https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\">React trick</a> is used to render the forms conditionally: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If the first statement evaluates false, or is <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>, the second statement ( generating the form ) is not executed at all. </p>\n<p>We can make this even more straightforward by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional operator</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">{</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span>\n      <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n      <span class=\"token function\">noteForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// ...</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If <em>user === null</em> is <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">truthy</a>, <em>loginForm()</em> is executed. If not, <em>noteForm()</em>.</p>\n<p>Lets do one more modification. If user is logged in, their name is rendered: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>Notification message<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n    <span class=\"token punctuation\">{</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span>\n      <span class=\"token function\">loginForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> logged <span class=\"token keyword\">in</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">noteForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Notes<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// ...</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The solution looks a bit ugly, but well leave it for now. </p>\n<p>Our main component <i>App</i> is at the moment way too large. The changes we did now are a clear sign that the forms should be refactored into their own components. However we will leave that for an noncomplusory excercise. </p>\n<p>Current application code can be found from <a href=\"https://github.com/fullstack-hy2019/part2-notes/tree/part5-2\">github</a>, branch <i>part5-2</i>.</p>\n<h3>Creating new notes</h3>\n<p>The token returned with a successful login is saved to the application state <i>user</i> field <i>token</i>:</p>\n<picture><img src=\"/static/032fc6df0208eeeea06ad7e34021d136/14be6/2.png\" srcset=\"/static/032fc6df0208eeeea06ad7e34021d136/4cce7/2.png 200w,\n/static/032fc6df0208eeeea06ad7e34021d136/bae5f/2.png 400w,\n/static/032fc6df0208eeeea06ad7e34021d136/14be6/2.png 800w,\n/static/032fc6df0208eeeea06ad7e34021d136/1b35a/2.png 1200w,\n/static/032fc6df0208eeeea06ad7e34021d136/9ee03/2.png 1600w,\n/static/032fc6df0208eeeea06ad7e34021d136/6c2d9/2.png 2202w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Unfortunately, hooked states are not shown properly with the newest 15.1.2019 version of react dev tools if they are tables or objects. The screenshot is from version 3.5 </p>\n<p>Lets fix creating new notes to work with the backend. This means adding the token of logged in user to the Authorization-header of the HTTP-request. </p>\n<p>The <i>noteService</i>-module changes as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToken</span> <span class=\"token operator\">=</span> newToken <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  token <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newToken<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> create <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> newObject <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token punctuation\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> baseUrl <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> /</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">,</span> newObject<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> create<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">,</span> setToken <span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>The noteService module contains a private variable <em>token</em>. It's value can be changed with a function <em>setToken</em>, which is exported by the module. <em>Create</em>, now with async/await syntax, sets the token to the <i>Authorization</i>-header. The header is given to axios as the third parameter of the <i>post</i> method. </p>\n<p>The event handler responsible for log in must be changed to call the method <code>noteService.setToken(user.token)</code> with a succesfull log in: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> handleLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">    noteService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span>    <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now adding new notes works again!</p>\n<h3>Saving the token to browsers local storage</h3>\n<p>Our application has a flaw: When the page is rerendered, information of the users login dissappears. This also slows down development. For example when we test creating new notes, we have to login again every single time. </p>\n<p>This problem is easily solved by saving the login details to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">local storage</a>. Local Storage is a <a href=\"https://en.wikipedia.org/wiki/Key-value_database\">key-value</a> database in the browser. </p>\n<p>It is very easy to use. A <i>value</i> corresponding to a certain <i>key</i> is saved to the database with method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem</a>. For example: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nimi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'juha tauriainen'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>saves the string given as the second parameter as the value of key <i>nimi</i>. </p>\n<p>The value of a key can be found with method <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nimi'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem</a> removes a key. </p>\n<p>Values in the storage stay even when the page is rerendered. The storage is <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>- specific, so each web-application has it's own storage. </p>\n<p>Lets extend our application so it saves the user details of a logged in user to the local storage. </p>\n<p>Values saved to the storage are <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMString\">DOMstrings</a>, so we cannot save a JavaScript object as is. The object has to be first parsed to JSON with the method <em>JSON.stringify</em>. Correspondigly when a JSON-object is read from the local storage, it has to be parsed back to JavaScript with <em>JSON.parse</em>.</p>\n<p>Changes to the login method are as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> handleLogin <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> loginService<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">      window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span> </span>      noteService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The details of a logged in user are now saved to the local storage, and they can be viewed on the console: </p>\n<picture><img src=\"/static/4d5ded762d5d9898dde95a685457df3c/14be6/3b.png\" srcset=\"/static/4d5ded762d5d9898dde95a685457df3c/4cce7/3b.png 200w,\n/static/4d5ded762d5d9898dde95a685457df3c/bae5f/3b.png 400w,\n/static/4d5ded762d5d9898dde95a685457df3c/14be6/3b.png 800w,\n/static/4d5ded762d5d9898dde95a685457df3c/1b35a/3b.png 1200w,\n/static/4d5ded762d5d9898dde95a685457df3c/9ee03/3b.png 1600w,\n/static/4d5ded762d5d9898dde95a685457df3c/6c2d9/3b.png 2202w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>We still have to modify our application so, that when we enter the page, the application checks if user details of a logged in user can already be found from the local storage. If they can, the details are saved to the state of the application and to <i>noteServicelle</i>.</p>\n<p>The right place to do this is an <a href=\"https://reactjs.org/docs/hooks-effect.html\">effect hook</a>. A mechanism we first encountered in <a href=\"/osa2/palvelimella_olevan_datan_hakeminen#effect-hookit\">part 2</a>, and use to fetch notes from the server to the frontend. </p>\n<p>We can have multiple effect hooks, so lets create a second one to handle the first loading of the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorMessage<span class=\"token punctuation\">,</span> setErrorMessage<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">,</span> setUser<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    noteService\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>initialNotes <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>initialNotes<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> loggedUserJSON <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loggedUserJSON<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>loggedUserJSON<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      noteService<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The empty array as the parameter of the effect ensures, that the effect is executed only then the component is rendered <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">for the first time</a>.</p>\n<p>Now a user stays logged in to the application forever. We should propably add <i>logout</i> functionality which removes the login details from the local storage. We will however leave it to the exercises. </p>\n<p>Its possible to log out using the console, and that is enough for us.\nYou can log out with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loggedNoteappUser'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>or with the command which empties localstorage completely: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Current application code can be found from <a href=\"https://github.com/fullstack-hy2019/part2-notes/tree/part5-3\">github</a>, branch <i>part5-3</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<p>We will now create a frontend for the bloglist-backend we created in last part. You can use <a href=\"https://github.com/fullstack-hy2019/bloglist-frontend\">this application</a> from GitHub as the base of your solution. The application expects your backend to be running on port 3003. </p>\n<p>It is enough to submit your finished solution. You can do a commit after each exercise, but that is not necessary. </p>\n<p>The first few exercises revise everything we have learned about React so far. They can be challenging, especially if your backend is incomplete.\nIt might be best to use the backend from model answers of part 4. </p>\n<p>While doing the exercises, remember all of the debugging methods we have talked about, especially keeping an eye on the console. </p>\n<p><strong>Warning:</strong> If you notice you are mixing async/await and <em>then</em> commands, its 99.9%  certain you are doing something wrong. Use either or, never both. </p>\n<h4>5.1: bloglist frontend, step1</h4>\n<p>Clone the application from <a href=\"https://github.com/fullstack-hy2019/bloglist-frontend.git\">Githubissa</a> with the command: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/fullstack-hy2019/bloglist-frontend.git</code></pre></div>\n<p><i>remove the git-configuration of the cloned application</i></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> bloglist-frontend   // mene kloonatun repositorion hakemistoon\n<span class=\"token function\">rm</span> -rf .git</code></pre></div>\n<p>The application is started the usual way, but you have to install its dependencies first: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> start</code></pre></div>\n<p>Implement login functionality to the frontend. The token returned with a successfull login is saved to the applications state <i>user</i>.</p>\n<p>If a user is not logged in, <i>only</i> the loginform is visible. </p>\n<picture><img src=\"/static/88b4286d358a11f467310003e97a36f8/14be6/4.png\" srcset=\"/static/88b4286d358a11f467310003e97a36f8/4cce7/4.png 200w,\n/static/88b4286d358a11f467310003e97a36f8/bae5f/4.png 400w,\n/static/88b4286d358a11f467310003e97a36f8/14be6/4.png 800w,\n/static/88b4286d358a11f467310003e97a36f8/1b35a/4.png 1200w,\n/static/88b4286d358a11f467310003e97a36f8/97a7b/4.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>If user is logged in, the name of the user and a list of blogs is shown. </p>\n<picture><img src=\"/static/77590b28082cb2c739fd0f90e3c470f9/14be6/5.png\" srcset=\"/static/77590b28082cb2c739fd0f90e3c470f9/4cce7/5.png 200w,\n/static/77590b28082cb2c739fd0f90e3c470f9/bae5f/5.png 400w,\n/static/77590b28082cb2c739fd0f90e3c470f9/14be6/5.png 800w,\n/static/77590b28082cb2c739fd0f90e3c470f9/1b35a/5.png 1200w,\n/static/77590b28082cb2c739fd0f90e3c470f9/c7c74/5.png 1494w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>User details of the logged in user do not have to be saved to the local storage yet. </p>\n<p><strong>NB</strong> You can implement the conditional rendering of the login form for example like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Log <span class=\"token keyword\">in</span> to application<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>form<span class=\"token operator\">></span>\n          <span class=\"token comment\">//...</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>blogs<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>blogs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>blog <span class=\"token operator\">=></span>\n        <span class=\"token operator\">&lt;</span>Blog key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> blog<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>blog<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>5.2: bloglist frontend, step2</h4>\n<p>Make the login 'permanent' by using the local storage. Implement also a way to log out. </p>\n<picture><img src=\"/static/15463bd45d81054cc065d0fd11048706/14be6/6.png\" srcset=\"/static/15463bd45d81054cc065d0fd11048706/4cce7/6.png 200w,\n/static/15463bd45d81054cc065d0fd11048706/bae5f/6.png 400w,\n/static/15463bd45d81054cc065d0fd11048706/14be6/6.png 800w,\n/static/15463bd45d81054cc065d0fd11048706/1b35a/6.png 1200w,\n/static/15463bd45d81054cc065d0fd11048706/98a3c/6.png 1462w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The borwser does not remember the details of the user after logging out. </p>\n<h4>5.3: bloglist frontend, step3</h4>\n<p>Expand your application to allow  a logged in user to add new blogs: </p>\n<picture><img src=\"/static/b0009038242f819d9ae4b9510705e34a/14be6/7.png\" srcset=\"/static/b0009038242f819d9ae4b9510705e34a/4cce7/7.png 200w,\n/static/b0009038242f819d9ae4b9510705e34a/bae5f/7.png 400w,\n/static/b0009038242f819d9ae4b9510705e34a/14be6/7.png 800w,\n/static/b0009038242f819d9ae4b9510705e34a/1b35a/7.png 1200w,\n/static/b0009038242f819d9ae4b9510705e34a/93539/7.png 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Form for adding blogs can be its own component, which manages the input from the form fields with its state. All the state related to adding blogs can of course also be in the <i>App</i> - component. </p>\n<h4>5.4*: bloglist frontend, step4</h4>\n<p>Implement notifications, which inform the user about successfull and unsuccessfull operations at the top of the page. For example when a new blog is addedd, the following notification can be shown: </p>\n<picture><img src=\"/static/07c8ad4e6c1dd323df404b8264eab828/14be6/8.png\" srcset=\"/static/07c8ad4e6c1dd323df404b8264eab828/4cce7/8.png 200w,\n/static/07c8ad4e6c1dd323df404b8264eab828/bae5f/8.png 400w,\n/static/07c8ad4e6c1dd323df404b8264eab828/14be6/8.png 800w,\n/static/07c8ad4e6c1dd323df404b8264eab828/1b35a/8.png 1200w,\n/static/07c8ad4e6c1dd323df404b8264eab828/b7120/8.png 1566w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Failed login can show the following notification: </p>\n<picture><img src=\"/static/043dad041e0af590f5ee9ced595ba4bb/14be6/9.png\" srcset=\"/static/043dad041e0af590f5ee9ced595ba4bb/4cce7/9.png 200w,\n/static/043dad041e0af590f5ee9ced595ba4bb/bae5f/9.png 400w,\n/static/043dad041e0af590f5ee9ced595ba4bb/14be6/9.png 800w,\n/static/043dad041e0af590f5ee9ced595ba4bb/1b35a/9.png 1200w,\n/static/043dad041e0af590f5ee9ced595ba4bb/e0b09/9.png 1576w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The notifications muse be visible for a few seconds. It is not compulsory to add colors. </p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-5-b92f84fe9702a35b12f10af4588ba4c2.svg"},"part":5,"letter":"a","lang":"en"}}},"pageContext":{"part":5,"letter":"a","lang":"en"}}