{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Users must be able to log into our application, and when a user is logged in, their user information must automatically be attached to any new notes they create. </p>\n<p>We will now implement support for <a href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-how-token-based-works\">token based authentication</a> to the backend. </p>\n<p>The princibles of token based authentication are depicted in the following sequence diagram: </p>\n<picture><img src=\"/static/8b2839fe97680c325df6647121af66c3/14be6/16e.png\" srcset=\"/static/8b2839fe97680c325df6647121af66c3/4cce7/16e.png 200w,\n/static/8b2839fe97680c325df6647121af66c3/bae5f/16e.png 400w,\n/static/8b2839fe97680c325df6647121af66c3/14be6/16e.png 800w,\n/static/8b2839fe97680c325df6647121af66c3/1b35a/16e.png 1200w,\n/static/8b2839fe97680c325df6647121af66c3/97a7b/16e.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>User starts by logging in using a login form implemented with React </p>\n<ul>\n<li>We will add the login form to the frontend in <a href=\"/en/part5\">part 5</a> </li>\n</ul>\n</li>\n<li>This causes the React code to send the username and the password to the server address <i>/api/login</i> as a HTTP POST request. </li>\n<li>\n<p>If the username and the password are correct, the server generates a <i>token</i> which somehow identifies the logged in user. </p>\n<ul>\n<li>The token is signed digitally, making it impossible to falsify (with cryptographic means)</li>\n</ul>\n</li>\n<li>The backend responds with a statuscode indicating the operation was successfull, and returns the token with the response.</li>\n<li>The browser saves the token, for example to the state of a React application. </li>\n<li>When the user creates a new note (or does some other operation requiring identification), the React code sends the token to the server with the request.</li>\n<li>The server uses the token to identify the user</li>\n</ul>\n<p>Lets first implement the functionality for logging in. Install the <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a> library, which allows us to generate <a href=\"https://jwt.io/\">JSON web tokens</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken --save</code></pre></div>\n<p>The code for login functionality goes to the file controllers/login.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span> user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> <span class=\"token string\">'invalid username or password'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter</code></pre></div>\n<p>The code starts by searching for the user from the database by the <i>username</i> attached to the request.\nNext it checks the <i>password</i>, also attached to the request.\nBecause the passwords themselves are not saved to the database, but <i>hashes</i> calculated from the passwords, <em>bcrypt.compare</em> method is used to check if the password is correct: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the user is not found, or the password is incorrect, the request is responded with statuscode <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a>. The reason for the failure is explained in the response body. </p>\n<p>If the password is correct, a token is created with method  <em>jwt.sign</em>. The token contains the username and the user id in a digitally signed form. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The token has been digitally signed using a string from the environment variable <i>SECRET</i> as the <i>secret</i>.\nDigital signature ensures, that only parties who know the secret can generate a valid token.\nValue for the environment variable must be set in the <i>.env</i> file. </p>\n<p>Successfull request is responded with the statuscode <i>200 ok</i>. The generated token and the username of the user are sent back in the response body. </p>\n<p>Now the code for login just has to be added to the application by adding the new router to <i>app.js</i>. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Lets try logging in using VS Code REST-client: </p>\n<picture><img src=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/14be6/17e.png\" srcset=\"/static/5c4c0fb60e15ec9c753e541a05002c3f/4cce7/17e.png 200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/bae5f/17e.png 400w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/14be6/17e.png 800w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/1b35a/17e.png 1200w,\n/static/5c4c0fb60e15ec9c753e541a05002c3f/52ebc/17e.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It does not work. The following is printed to console: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Error: secretOrPrivateKey must have a value\n    at Object.module.exports <span class=\"token punctuation\">[</span>as sign<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/sign.js:101:20<span class=\"token punctuation\">)</span>\n    at loginRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/login.js:26:21<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>node:32911<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async <span class=\"token keyword\">function</span> without a catch block, or by rejecting a promise <span class=\"token function\">which</span> was not handled with .catch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>. <span class=\"token punctuation\">(</span>rejection id: 2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The command <em>jwt.sign(userForToken, process.env.SECRET)</em> fails. We forgot to set a value to the environment variable <i>SECRET</i>. It can be any string. When we set the value in file <i>.env</i>, the login works. </p>\n<p>Successful login returns the user details and the token: </p>\n<picture><img src=\"/static/c560c6925aca9bf6cd0ae249dfccb81f/14be6/18e.png\" srcset=\"/static/c560c6925aca9bf6cd0ae249dfccb81f/4cce7/18e.png 200w,\n/static/c560c6925aca9bf6cd0ae249dfccb81f/bae5f/18e.png 400w,\n/static/c560c6925aca9bf6cd0ae249dfccb81f/14be6/18e.png 800w,\n/static/c560c6925aca9bf6cd0ae249dfccb81f/1b35a/18e.png 1200w,\n/static/c560c6925aca9bf6cd0ae249dfccb81f/9ee03/18e.png 1600w,\n/static/c560c6925aca9bf6cd0ae249dfccb81f/eb993/18e.png 1760w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Wrong username or password returns an error message and the proper statuscode</p>\n<picture><img src=\"/static/20856bc3b64dc1b60592234ca4e5b80b/14be6/19e.png\" srcset=\"/static/20856bc3b64dc1b60592234ca4e5b80b/4cce7/19e.png 200w,\n/static/20856bc3b64dc1b60592234ca4e5b80b/bae5f/19e.png 400w,\n/static/20856bc3b64dc1b60592234ca4e5b80b/14be6/19e.png 800w,\n/static/20856bc3b64dc1b60592234ca4e5b80b/1b35a/19e.png 1200w,\n/static/20856bc3b64dc1b60592234ca4e5b80b/9ee03/19e.png 1600w,\n/static/20856bc3b64dc1b60592234ca4e5b80b/c09de/19e.png 1740w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Limiting creating new notes to logged in users</h3>\n<p>Lets change creating new notes so, that it is only possible if the post request has a valid token attached.\nThe note is then saved to the notes list of the user identified by the token. </p>\n<p>There are serveral ways for sending the token from the browser to the server. We will use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization</a> header. The header also tells which <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">authentication schema</a> is used. This can be necessary if the server offers multiple ways to authenticate.\nIdentifying the schema tells the server how the attached credentials should be interpreted. </p>\n<p>The <i>Bearer</i>-schema is suitable for our needs. </p>\n<p>In practice this means, that if the token is for example the string <i>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</i>, the Authorization header will have the value: </p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>Creating new notes will change like so: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> request <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'token missing or invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n      date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      user<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Helper function <em>getTokenFrom</em> isolates the token from the <i>authorization</i> header. The validity of the token is checked with <em>jwt.verify</em>. The method also decodes the token, or returns the Object which the token was based on: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The object decoded from the token contains fields <i>username</i> and <i>id</i>, so it tells the server who made the request. </p>\n<p>If there is no token, or the object decoded from the token does not contain the users identity (<em>decodedToken.id</em> is undefined), error statuscode <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> is returned and the reason for the failure is explained in the response body. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    error<span class=\"token punctuation\">:</span> <span class=\"token string\">'token missing or invalid'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the identity of the maker of the request is resolved, the execution continues as before. </p>\n<p>A new note can now be created using postman if the <i>authorization</i> header is given the correct value, the string <i>bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</i>, where the second value is the token returned by the <i>login</i> operation. </p>\n<p>Using postman this looks as follows: </p>\n<picture><img src=\"/static/967f2e60c9368d7f53866bcb31bf0e47/14be6/20.png\" srcset=\"/static/967f2e60c9368d7f53866bcb31bf0e47/4cce7/20.png 200w,\n/static/967f2e60c9368d7f53866bcb31bf0e47/bae5f/20.png 400w,\n/static/967f2e60c9368d7f53866bcb31bf0e47/14be6/20.png 800w,\n/static/967f2e60c9368d7f53866bcb31bf0e47/1b35a/20.png 1200w,\n/static/967f2e60c9368d7f53866bcb31bf0e47/27c3e/20.png 1528w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and with Visual Studio Code REST client</p>\n<picture><img src=\"/static/cf83ffc022807244a67d702061d8faf7/14be6/21.png\" srcset=\"/static/cf83ffc022807244a67d702061d8faf7/4cce7/21.png 200w,\n/static/cf83ffc022807244a67d702061d8faf7/bae5f/21.png 400w,\n/static/cf83ffc022807244a67d702061d8faf7/14be6/21.png 800w,\n/static/cf83ffc022807244a67d702061d8faf7/1b35a/21.png 1200w,\n/static/cf83ffc022807244a67d702061d8faf7/9ee03/21.png 1600w,\n/static/cf83ffc022807244a67d702061d8faf7/19033/21.png 2008w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Error handling</h3>\n<p>Token verification can also cause a <i>JsonWebTokenError</i>. If we for example remove a few characters from the token and try creating a new note, this happens: </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">JsonWebTokenError: invalid signature\n    at /Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:126:19\n    at getSecret <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:80:14<span class=\"token punctuation\">)</span>\n    at Object.module.exports <span class=\"token punctuation\">[</span>as verify<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/node_modules/jsonwebtoken/verify.js:84:10<span class=\"token punctuation\">)</span>\n    at notesRouter.post <span class=\"token punctuation\">(</span>/Users/mluukkai/opetus/_2019fullstack-koodit/osa3/notes-backend/controllers/notes.js:40:30<span class=\"token punctuation\">)</span></code></pre></div>\n<p>There are many possible reasons for a decoding error. The token can be faulty (like in our example), falsified, or expired. Lets extend our errorhandlermiddleware to take into account the different decoding errors. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">unknownEndpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'unknown endpoint'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'CastError'</span> <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'ObjectId'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> <span class=\"token string\">'malformatted id'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'ValidationError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">.</span>message \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      error<span class=\"token punctuation\">:</span> <span class=\"token string\">'invalid token'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Current application code can be found from <a href=\"https://github.com/fullstack-hy2019/part3-notes-backend/tree/part4-8\">github</a>, branch <i>part4-8</i>.</p>\n<p>If the application has multiple interfaces requiring identification, JWTs validation should be separated into its own middleware. Some existing library, like <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a>, could also be used. </p>\n<h3>End notes</h3>\n<p>There has been many changes to the code, which has caused a typical problem for a fast phased software project: most of the tests have broken. Because this part of the course is already jammed with new information, we will leave fixing the tests to a non compulsory exercise. </p>\n<p>Usernames, passwords and applications using token authentication must always be used over <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>. We could use a Node <a href=\"https://nodejs.org/api/https.html\">HTTPS</a> server in our application instead of the <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">HTTP</a> server (it requires more configurations). In the other hand the production version of our application is in Heroku, so our applications stays secured because Heroku routes all traffic between a browser and the Heroku server over HTTPS. </p>\n<p>We will implement login to the frontend in the <a href=\"/part5\">next part</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises</h3>\n<p>In the next exercises, basics of user management will be implemented for the Bloglist application. The safest way is to follow the story from part 4 chapter <a href=\"/osa4/kayttajien_hallinta\">User management</a> to the chapter <a href=\"/osa4/token_perustainen_kirjautuminen\">Token-based authorization</a>. Creativity is of course allowed. </p>\n<p><strong>One more warning:</strong> If you notice you are mixing async/await and <em>then</em> calls, it is 99% certain you are doing something wrong. Use either or, never both. </p>\n<h4>4.15: bloglist expansion, step4</h4>\n<p>Implement a way to create new users by doing a HTTP POST-request to address <i>api/users</i>. Users have <i>username\n, password and name</i>.</p>\n<p>Do not save passwords to the database as clear text, but use <i>bcrypt</i>-library like we did in part 4 chapter <a href=\"/osa4/kayttajien_hallinta#kayttajien-luominen\">Creating new users</a></p>\n<p><strong>NB</strong> some windows users have had problems with <i>bcrypt</i>. If you run into problems, remove the library with command </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt --save </code></pre></div>\n<p>and install <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a> instead. </p>\n<p>Implement a way to see the details of all users by doing a suitable HTTP-request. </p>\n<p>List of users can, for example, look as follows: </p>\n<picture><img src=\"/static/b59bda1bd7e5987a5c805332d509e516/14be6/22.png\" srcset=\"/static/b59bda1bd7e5987a5c805332d509e516/4cce7/22.png 200w,\n/static/b59bda1bd7e5987a5c805332d509e516/bae5f/22.png 400w,\n/static/b59bda1bd7e5987a5c805332d509e516/14be6/22.png 800w,\n/static/b59bda1bd7e5987a5c805332d509e516/1b35a/22.png 1200w,\n/static/b59bda1bd7e5987a5c805332d509e516/07092/22.png 1336w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: bloglist expansion, step5</h4>\n<p>Add a feature which adds the following restrictions to creating new users: Both username and password must be given. Both username and password must be at least 3 characters long. Username must be unique. </p>\n<p>The operation must respond with a suitable statuscode and some kind of an error message if invalid user is created. </p>\n<p><strong>NB</strong> Do not test password restrictions with Mongoose validations. It is not a good idea because the password received by the backend and the password hash saved to the database are not the same thing. The password length should be validated in the controller like we did in <a href=\"/osa3/validointi_ja_es_lint\">part 3</a> before using Mongoose validation. </p>\n<p>Implement also tests which test that invalid users are not created and invalid add user operation returns a suitable statuscode and an error message. </p>\n<h4>4.17: bloglist expansion, step6</h4>\n<p>Expand blog so, that each blog contains information on the creator of the blog. </p>\n<p>Modify adding new blogs so, that when a new blog is created,  <i>any</i> user from the database is designated as it's creator (for example the one found first). Implement this according to part 4 chapter <a href=\"/osa4/kayttajien_hallinta#populate\">populate</a>.\nWhich user is designated as the creator does not matter just yet. The functionality is finished in exercise 4.19. </p>\n<p>Modify listing all blogs so that the creators user information is displayed with the blog: </p>\n<picture><img src=\"/static/050d6c28bf6fec8ad27605f5f0aa2684/14be6/23.png\" srcset=\"/static/050d6c28bf6fec8ad27605f5f0aa2684/4cce7/23.png 200w,\n/static/050d6c28bf6fec8ad27605f5f0aa2684/bae5f/23.png 400w,\n/static/050d6c28bf6fec8ad27605f5f0aa2684/14be6/23.png 800w,\n/static/050d6c28bf6fec8ad27605f5f0aa2684/1b35a/23.png 1200w,\n/static/050d6c28bf6fec8ad27605f5f0aa2684/93539/23.png 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>and listing users so that the blogs user has created are listed with the user: </p>\n<picture><img src=\"/static/bf610e921176baf7be297dec8c712ba9/14be6/24.png\" srcset=\"/static/bf610e921176baf7be297dec8c712ba9/4cce7/24.png 200w,\n/static/bf610e921176baf7be297dec8c712ba9/bae5f/24.png 400w,\n/static/bf610e921176baf7be297dec8c712ba9/14be6/24.png 800w,\n/static/bf610e921176baf7be297dec8c712ba9/1b35a/24.png 1200w,\n/static/bf610e921176baf7be297dec8c712ba9/9ee03/24.png 1600w,\n/static/bf610e921176baf7be297dec8c712ba9/67c6f/24.png 1608w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: bloglist expansion, step7</h4>\n<p>Implement token-based authentication according to part 4 chapter <a href=\"/osa4#kirjautuminen\">Authorization</a></p>\n<h4>4.19: bloglist expansion, step8</h4>\n<p>Modify adding new blogs so, that it requires a valid token to be sent with the HTTP POST request. The user identified by the token is designated as the creator of the blog. </p>\n<h4>4.20*: bloglist expansion, step9</h4>\n<p><a href=\"/osa4#kirjautuminen\">Example</a> from part 4 shows taking the token from the header with the <em>getTokenFrom</em> helperfunction.</p>\n<p>If you used the same solution, refactor taking the token to a <a href=\"/osa3#middlewaret\">middleware</a>. The middleware should take the token from the <i>Authorization</i>-header and place it to <i>token</i> field of the <i>request</i> object. </p>\n<p>So when you register middlewares in the <i>app.js</i> file before all routes</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>routes can access the token with <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>4.21*: bloglist expansion, step10</h4>\n<p>Change the delete blog operation so, that deleting a blog is possible only if the user deleting a blog (the user identified by the token) is the same as the blogs creator. </p>\n<p>If deleting a blog is attempted without a token or by a wrong user, the operation should return a suitable statuscode. </p>\n<p>Note, that if you fetch a blog from the database</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>the field <i>blog.user</i> does not contain a string, but an Object. So if you want to compare the id of the object fetched from the database and a string id, normal comparison operation does not work. The id fetched from the database must be parsed into a string first. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<!---\nnote left of user\n  user fills in login form with\n  username and password\nend note\nuser -> browser: login button pressed\n\nbrowser -> backend: HTTP POST /api/login { username, password }\nnote left of backend\n  backend generates TOKEN that identifies user \nend note\nbackend -> browser: TOKEN returned as message body \nnote left of browser\n  browser saves TOKEN\nend note\nnote left of user\n  user creates a note\nend note\nuser -> browser: create note button pressed\nbrowser -> backend: HTTP POST /api/notes { content } TOKEN in header\nnote left of backend\n  backend identifies userfrom the TOKEN\nend note\n\nbackend -> browser: 201 created\n\nuser -> user:\n-->\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-4-f800638504cdf371a12947fc31d52030.svg"},"part":4,"letter":"d","lang":"en"}}},"pageContext":{"part":4,"letter":"d","lang":"en"}}