{"data":{"markdownRemark":{"html":"<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/\">\n  <img alt=\"Creative Commons -lisenssi\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png\"\n  />\n</a>\n<h2>Osan 5 oppimistavoitteet</h2>\n<ul>\n<li>\n<p>React</p>\n<ul>\n<li>child</li>\n<li>ref</li>\n<li>PropTypes</li>\n</ul>\n</li>\n<li>\n<p>Frontendin testauksen alkeet</p>\n<ul>\n<li>enzyme</li>\n<li>shallow ja full DOM -rendering</li>\n</ul>\n</li>\n<li>\n<p>Redux</p>\n<ul>\n<li>Flux-pattern</li>\n<li>Storage, reducerit, actionit</li>\n<li>reducereiden testaus, deep-freeze</li>\n</ul>\n</li>\n<li>\n<p>React+redux</p>\n<ul>\n<li>Storagen välittäminen komponenteille propseilla ja kontekstissa</li>\n</ul>\n</li>\n<li>\n<p>Javascript</p>\n<ul>\n<li>computed property name</li>\n<li>Spread-operaatio</li>\n<li>Reduxin edellyttämästä funktionaalisesta ohjelmoinnista</li>\n<li>puhtaat funktiot</li>\n<li>immutable</li>\n</ul>\n</li>\n</ul>\n<h2>Kirjautuminen React-sovelluksesta</h2>\n<p>Kaksi edellistä osaa keskittyivät lähinnä backendin toiminnallisuuteen. Edellisessä osassa backendiin toteutettua käyttäjänhallintaa ei ole tällä hetkellä tuettuna frontendissa millään tavalla.</p>\n<p>Frontend näyttää tällä hetkellä olemassaolevat muistiinpanot ja antaa muuttaa niiden tilaa. Uusia muistiinpanoja ei kuitenkaan voi lisätä, sillä osan 4 muutosten myötä backend edellyttää, että lisäyksen mukana on käyttäjän identiteetin varmistava token.</p>\n<p>Toteutetaan nyt osa käyttäjienhallinnan edellyttämästä toiminnallisuudesta frontendiin. Aloitetaan käyttäjän kirjautumisesta. Oletetaan vielä tässä osassa, että käyttäjät luodaan suoraan backendiin.</p>\n<p>Sovelluksen yläosaan on nyt lisätty kirjautumislomake, myös uuden muistiinpanon lisäämisestä huolehtiva lomake on siirretty sivun yläosaan:</p>\n<p>![]({{ \"/assets/5/1.png\" | absolute_url }})</p>\n<p>Komponentin <em>App</em> koodi näyttää seuraavalta:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport noteService from './services/notes'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: [],\n      newNote: '',\n      showAll: true,\n      error: null,\n      username: '',\n      password: '',\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    noteService.getAll().then(notes =>\n      this.setState({ notes })\n    )\n  }\n\n  addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: this.state.newNote,\n      date: new Date(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(newNote => {\n        this.setState({\n          notes: this.state.notes.concat(newNote),\n          newNote: ''\n        })\n      })\n  }\n\n  toggleImportanceOf = (id) => {\n    // ...\n  }\n\n  login = (event) => {\n    event.preventDefault()\n    console.log('logging in with', this.state.username, this.state.password)\n  }\n\n  handleNoteChange = (event) => {\n    this.setState({ newNote: event.target.value })\n  }\n\n  handlePasswordChange = (event) => {\n    this.setState({ password: event.target.value })\n  }\n\n  handleUsernameChange = (event) => {\n    this.setState({ username: event.target.value })\n  }\n\n  toggleVisible = () => {\n    this.setState({ showAll: !this.state.showAll })\n  }\n\n  render() {\n    // ...\n\n    return (\n      &#x3C;div>\n        &#x3C;h1>Muistiinpanot&#x3C;/h1>\n\n        &#x3C;Notification message={this.state.error} />\n\n        &#x3C;h2>Kirjaudu&#x3C;/h2>\n\n        &#x3C;form onSubmit={this.login}>\n          &#x3C;div>\n            käyttäjätunnus\n            &#x3C;input\n              type=\"text\"\n              value={this.state.username}\n              onChange={this.handleUsernameChange}\n            />\n          &#x3C;/div>\n          &#x3C;div>\n            salasana\n            &#x3C;input\n              type=\"password\"\n              value={this.state.password}\n              onChange={this.handlePasswordChange}\n            />\n          &#x3C;/div>\n          &#x3C;button type=\"submit\">kirjaudu&#x3C;/button>\n        &#x3C;/form>\n\n        &#x3C;h2>Luo uusi muistiinpano&#x3C;/h2>\n\n        &#x3C;form onSubmit={this.addNote}>\n          &#x3C;input\n            value={this.state.newNote}\n            onChange={this.handleNoteChange}\n          />\n          &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n        &#x3C;/form>\n\n        &#x3C;h2>Muistiinpanot&#x3C;/h2>\n\n        // ...\n\n      &#x3C;/div >\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-1\">githubissa</a>, tagissa <em>part5-1</em>.</p>\n<p>Kirjautumislomakkeen käsittely noudattaa samaa periaatetta kuin <a href=\"/osa2#lomakkeet\">osassa 2</a>. Lomakkeen kenttiä varten on lisätty komponentin tilaan kentät <em>username</em> ja <em>password</em>. Molemmille kentille on rekisteröity muutoksenkäsittelijä (<em>handleUsernameChange</em> ja <em>handlePasswordChange</em>), joka synkronoi kenttään tehdyt muutokset komponentin <em>App</em> tilaan. Kirjautumislomakkeen lähettämisestä vastaava metodi <em>login</em> ei tee vielä mitään.</p>\n<p>Jos lomakkeella on paljon kenttiä, voi olla työlästä toteuttaa jokaiselle kentälle oma muutoksenkäsittelijä. React tarjoaakin tapoja, miten yhden muutoksenkäsittelijän avulla on mahdollista huolehtia useista syötekentistä. Jaetun käsittelijän on saatava jollain tavalla tieto minkä syötekentän muutos aiheutti tapahtuman. Eräs tapa tähän on lomakkeen syötekenttien nimeäminen.</p>\n<p>Lisätään <em>input</em> elementteihin nimet <em>name</em>-attribuutteina ja vaihdetaan molemmat käyttämään samaa muutoksenkäsittelijää:</p>\n<pre><code class=\"language-html\">&#x3C;form onSubmit=\"{this.login}\">\n  &#x3C;div>\n    käyttäjätunnus\n    &#x3C;input\n      type=\"text\"\n      name=\"username\"\n      value=\"{this.state.username}\"\n      onChange=\"{this.handleLoginFieldChange}\"\n    />\n  &#x3C;/div>\n  &#x3C;div>\n    salasana\n    &#x3C;input\n      type=\"password\"\n      name=\"password\"\n      value=\"{this.state.password}\"\n      onChange=\"{this.handleLoginFieldChange}\"\n    />\n  &#x3C;/div>\n  &#x3C;button type=\"submit\">kirjaudu&#x3C;/button>\n&#x3C;/form>\n</code></pre>\n<p>Yhteinen muutoksista huolehtiva tapahtumankäsittelijä on seuraava:</p>\n<pre><code class=\"language-js\">handleLoginFieldChange = event => {\n  if (event.target.name === 'password') {\n    this.setState({ password: event.target.value });\n  } else if (event.target.name === 'username') {\n    this.setState({ username: event.target.value });\n  }\n};\n</code></pre>\n<p>Tapahtumankäsittelijän parametrina olevan tapahtumaolion <em>event</em> kentän <em>target.name</em> arvona on tapahtuman aiheuttaneen komponentin <em>name</em>-attribuutti, eli joko <em>username</em> tai <em>password</em>. Koodi haarautuu nimen perusteella ja asettaa tilaan oikean kentän arvon.</p>\n<p>Javascriptissa on ES6:n myötä uusi syntaksi <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">computed property name</a>, jonka avulla olion kentän voi määritellä muuttujan avulla. Esim. seuraava koodi</p>\n<pre><code class=\"language-js\">const field = 'name';\n\nconst object = { [field]: 'Arto Hellas' };\n</code></pre>\n<p>määrittelee olion <code>{ name: 'Arto Hellas'}</code></p>\n<p>Näin saamme eliminoitua if-lauseen tapahtumankäsittelijästä ja se pelkistyy yhden rivin mittaiseksi:</p>\n<pre><code class=\"language-js\">handleLoginFieldChange = event => {\n  this.setState({ [event.target.name]: event.target.value });\n};\n</code></pre>\n<p>Kirjautuminen tapahtuu tekemällä HTTP POST -pyyntö palvelimen osoitteeseen <em>api/login</em>. Eristetään pyynnön tekevä koodi omaan moduuliin, tiedostoon <em>services/login.js</em>.</p>\n<p>Käytetään nyt promisejen sijaan <em>async/await</em>-syntaksia HTTP-pyynnön tekemiseen:</p>\n<pre><code class=\"language-js\">import axios from 'axios';\nconst baseUrl = '/api/login';\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials);\n  return response.data;\n};\n\nexport default { login };\n</code></pre>\n<p>Kirjautumisen käsittelystä huolehtiva metodi voidaan toteuttaa seuraavasti:</p>\n<pre><code class=\"language-js\">login = async event => {\n  event.preventDefault();\n  try {\n    const user = await loginService.login({\n      username: this.state.username,\n      password: this.state.password,\n    });\n\n    this.setState({ username: '', password: '', user });\n  } catch (exception) {\n    this.setState({\n      error: 'käyttäjätunnus tai salasana virheellinen',\n    });\n    setTimeout(() => {\n      this.setState({ error: null });\n    }, 5000);\n  }\n};\n</code></pre>\n<p>Kirjautumisen onnistuessa nollataan kirjautumislomakkeen kentät <em>ja</em> talletetaan palvelimen vastaus (joka sisältää <em>tokenin</em> sekä kirjautuneen käyttäjän tiedot) sovelluksen tilan kenttään <em>user</em>.</p>\n<p>Jos kirjautuminen epäonnistuu, eli metodin <em>loginService.login</em> suoritus aiheuttaa poikkeuksen, ilmoitetaan siitä käyttäjälle.</p>\n<p>Onnistunut kirjautuminen ei nyt näy sovelluksen käyttäjälle mitenkään. Muokataan sovellusta vielä siten, että kirjautumislomake näkyy vain <em>jos käyttäjä ei ole kirjautuneena</em> eli <em>this.state.user === null</em> ja uuden muistiinpanon luomislomake vain <em>jos käyttäjä on kirjautuneena</em>, eli (eli <em>this.state.user</em> sisältää kirjautuneen käyttäjän tiedot.</p>\n<p>Määritellään ensin komponentin <em>App</em> metodiin render apufunktiot lomakkeiden generointia varten:</p>\n<pre><code class=\"language-html\">const loginForm = () => (\n&#x3C;div>\n  &#x3C;h2>Kirjaudu&#x3C;/h2>\n\n  &#x3C;form onSubmit=\"{this.login}\">\n    &#x3C;div>\n      käyttäjätunnus\n      &#x3C;input\n        type=\"text\"\n        name=\"username\"\n        value=\"{this.state.username}\"\n        onChange=\"{this.handleLoginFieldChange}\"\n      />\n    &#x3C;/div>\n    &#x3C;div>\n      salasana\n      &#x3C;input\n        type=\"password\"\n        name=\"password\"\n        value=\"{this.state.password}\"\n        onChange=\"{this.handleLoginFieldChange}\"\n      />\n    &#x3C;/div>\n    &#x3C;button type=\"submit\">kirjaudu&#x3C;/button>\n  &#x3C;/form>\n&#x3C;/div>\n) const noteForm = () => (\n&#x3C;div>\n  &#x3C;h2>Luo uusi muistiinpano&#x3C;/h2>\n\n  &#x3C;form onSubmit=\"{this.addNote}\">\n    &#x3C;input value=\"{this.state.newNote}\" onChange=\"{this.handleNoteChange}\" />\n    &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n  &#x3C;/form>\n&#x3C;/div>\n)\n</code></pre>\n<p>ja renderöidään ne ehdollisesti komponentin <em>App</em> render-metodissa:</p>\n<pre><code class=\"language-bash\">class App extends React.Component {\n  // ..\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n\n      &#x3C;Notification message={this.state.error}/>\n\n      {this.state.user === null &#x26;&#x26; loginForm()}\n\n      {this.state.user !== null &#x26;&#x26; noteForm()}\n\n\n      &#x3C;h2>Muistiinpanot&#x3C;/h2>\n\n      // ...\n\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Lomakkeiden ehdolliseen renderöintiin käytetään hyväksi aluksi hieman erikoiselta näyttävää, mutta Reactin yhteydessä <a href=\"https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\">yleisesti käytettyä kikkaa</a>:</p>\n<pre><code class=\"language-js\">{\n  this.state.user === null &#x26;&#x26; loginForm();\n}\n</code></pre>\n<p>Jos ensimmäinen osa evaluoituu epätodeksi eli on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>, ei toista osaa eli lomakkeen generoivaa koodia suoriteta ollenkaan.</p>\n<p>Voimme suoraviivaistaa edellistä vielä hieman käyttämällä <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">kysymysmerkkioperaattoria</a>:</p>\n<pre><code class=\"language-html\">return (\n  &#x3C;div>\n    &#x3C;h1>Muistiinpanot&#x3C;/h1>\n\n    &#x3C;Notification message={this.state.error}/>\n\n    {this.state.user === null ?\n      loginForm() :\n      noteForm()\n    }\n\n    &#x3C;h2>Muistiinpanot&#x3C;/h2>\n\n    // ...\n\n  &#x3C;/div>\n)\n</code></pre>\n<p>Eli jos <em>this.state.user === null</em> on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">truthy</a>, suoritetaan <em>loginForm</em> ja muussa tapauksessa <em>noteForm</em>.</p>\n<p>Tehdään vielä sellainen muutos, että jos käyttäjä on kirjautunut, renderöidään kirjautuneet käyttäjän nimi:</p>\n<pre><code class=\"language-html\">return (\n  &#x3C;div>\n    &#x3C;h1>Muistiinpanot&#x3C;/h1>\n\n    &#x3C;Notification message={this.state.error}/>\n\n    {this.state.user === null ?\n      loginForm() :\n      &#x3C;div>\n        &#x3C;p>{this.state.user.name} logged in&#x3C;/p>\n        {noteForm()}\n      &#x3C;/div>\n    }\n\n    &#x3C;h2>Muistiinpanot&#x3C;/h2>\n\n    // ...\n\n  &#x3C;/div>\n)\n</code></pre>\n<p>Ratkaisu näyttää hieman rumalta, mutta jätämme sen koodiin toistaiseksi.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-2\">githubissa</a>, tagissa <em>part5-2</em>. <strong>HUOM</strong> koodissa on parissa kohtaa käytetty vahingossa komponentin kentästä nimeä <em>new</em>note<em>, oikea (seuraaviin tageihin korjattu) muoto on _newNote</em>,</p>\n<p>Sovelluksemme pääkomponentti <em>App</em> on tällä hetkellä jo aivan liian laaja ja nyt tekemämme muutokset ovat ilmeinen signaali siitä, että lomakkeet olisi syytä refaktoroida omiksi komponenteikseen. Jätämme sen kuitenkin harjoitustehtäväksi.</p>\n<h2>Muistiinpanojen luominen</h2>\n<p>Frontend on siis tallettanut onnistuneen kirjautumisen yhteydessä backendilta saamansa tokenin sovelluksen tilaan <em>this.state.user.token</em>:</p>\n<p>![]({{ \"/images/5/1b.png\" | absolute_url }})</p>\n<p>Korjataan uusien muistiinpanojen luominen siihen muotoon, mitä backend edellyttää, eli lisätään kirjautuneen käyttäjän token HTTP-pyynnön Authorization-headeriin.</p>\n<p><em>noteService</em>-moduuli muuttuu seuraavasti:</p>\n<pre><code class=\"language-js\">import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nlet token = null;\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`;\n};\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  const response = await axios.post(baseUrl, newObject, config);\n  return response.data;\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, update, setToken };\n</code></pre>\n<p>Moduulille on määritelty vain moduulin sisällä näkyvä muuttuja <em>token</em>, jolle voidaan asettaa arvo moduulin exporttaamalla funktiolla <em>setToken</em>. Async/await-syntaksiin muutettu <em>create</em> asettaa moduulin tallessa pitämän tokenin <em>Authorization</em>-headeriin, jonka se antaa axiosille metodin <em>post</em> kolmantena parametrina.</p>\n<p>Kirjautumisesta huolehtivaa tapahtumankäsittelijää pitää vielä viilata sen verran, että se kutsuu metodia <code>noteService.setToken(user.token)</code> onnistuneen kirjautumisen yhteydessä:</p>\n<pre><code class=\"language-js\">login = async event => {\n  event.preventDefault();\n  try {\n    const user = await loginService.login({\n      username: this.state.username,\n      password: this.state.password,\n    });\n\n    noteService.setToken(user.token);\n    this.setState({ username: '', password: '', user });\n  } catch (exception) {\n    // ...\n  }\n};\n</code></pre>\n<p>Uusien muistiinpanojen luominen onnistuu taas!</p>\n<h2>Tokenin tallettaminen selaimen local storageen</h2>\n<p>Sovelluksessamme on ikävä piirre: kun sivu uudelleenladataan, tieto käyttäjän kirjautumisesta katoaa. Tämä hidastaa melkoisesti myös sovelluskehitystä, esim. testatessamme uuden muistiinpanon luomista, joudumme joka kerta kirjautumaan järjestelmään.</p>\n<p>Ongelma korjaantuu helposti tallettamalla kirjautumistiedot <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\">local storageen</a> eli selaimessa olevaan avain-arvo- eli <a href=\"https://en.wikipedia.org/wiki/Key-value_database\">key-value</a>-periaatteella toimivaan tietokantaan.</p>\n<p>Local storage on erittäin helppokäyttöinen. Metodilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem\">setItem</a> talletetaan tiettyä <em>avainta</em> vastaava <em>arvo</em>, esim:</p>\n<pre><code class=\"language-js\">window.localStorage.setItem('nimi', 'juha tauriainen');\n</code></pre>\n<p>tallettaa avaimen <em>nimi</em> arvoksi toisena parametrina olevan merkkijonon.</p>\n<p>Avaimen arvo selviää metodilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem\">getItem</a>:</p>\n<pre><code class=\"language-js\">window.localStorage.getItem('nimi');\n</code></pre>\n<p>ja <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem\">removeItem</a> poistaa avaimen.</p>\n<p>Storageen talletetut arvot säilyvät vaikka sivu uudelleenladattaisiin. Storage on ns. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>-kohtainen, eli jokaisella selaimella käytettävällä web-sovelluksella on oma storagensa.</p>\n<p>Laajennetaan sovellusta siten, että se asettaa kirjautuneen käyttäjän tiedot local storageen.</p>\n<p>Koska storageen talletettavat arvot ovat <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMString\">merkkijonoja</a>, emme voi tallettaa storageen suoraan Javascript-oliota, vaan ne on muutettava ensin JSON-muotoon metodilla <em>JSON.stringify</em>. Vastaavasti kun JSON-muotoinen olio luetaan local storagesta, on se parsittava takaisin Javascript-olioksi metodilla <em>JSON.parse</em>.</p>\n<p>Kirjautumisen yhteyteen tehtävä muutos on seuraava:</p>\n<pre><code class=\"language-js\">login = async event => {\n  event.preventDefault();\n\n  try {\n    const user = await loginService.login({\n      username: this.state.username,\n      password: this.state.password,\n    });\n\n    window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));\n    noteService.setToken(user.token);\n    this.setState({ username: '', password: '', user });\n  } catch (exception) {\n    // ...\n  }\n};\n</code></pre>\n<p>Kirjautuneen käyttäjän tiedot tallentuvat nyt local storageen ja niitä voidaan tarkastella konsolista:</p>\n<p>![]({{ \"/images/5/2a.png\" | absolute_url }})</p>\n<p>Sovellusta on vielä laajennettava siten, että kun sivulle tullaan uudelleen, esim. selaimen uudelleenlataamisen yhteydessä, tulee sovelluksen tarkistaa löytyykö local storagesta tiedot kirjautuneesta käyttäjästä. Jos löytyy, asetetaan ne sovelluksen tilaan ja <em>noteServicelle</em>.</p>\n<p>Sopiva paikka tähän on <em>App</em>-komponentin metodi <a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">componentDidMount</a> johon tutustuimme jo <a href=\"/osa2#komponenttien-lifecycle-metodit\">osassa 2</a>.</p>\n<p>Kyseessä on siis ns. lifecycle-metodi, jota React-kutsuu heti komponentin ensimmäisen renderöinnin jälkeen. Metodissa on tällä hetkellä jo muistiinpanot palvelimelta lataava koodi. Laajennetaan koodia seuraavasti</p>\n<pre><code class=\"language-js\">componentDidMount() {\n  noteService.getAll().then(notes =>\n    this.setState({ notes })\n  )\n\n  const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n  if (loggedUserJSON) {\n    const user = JSON.parse(loggedUserJSON)\n    this.setState({user})\n    noteService.setToken(user.token)\n  }\n}\n</code></pre>\n<p>Nyt käyttäjä pysyy kirjautuneena sovellukseen ikuisesti. Sovellukseen olisikin kenties syytä lisätä <em>logout</em>-toiminnallisuus, joka poistaisi kirjautumistiedot local storagesta. Jätämme kuitenkin uloskirjautumisen harjoitustehtäväksi.</p>\n<p>Meille riittää se, että sovelluksesta on mahdollista kirjautua ulos kirjoittamalla konsoliin</p>\n<pre><code class=\"language-js\">window.localStorage.removeItem('loggedNoteappUser');\n</code></pre>\n<p>tai local storagen tilan kokonaan nollaavan komennon</p>\n<pre><code class=\"language-js\">window.localStorage.clear();\n</code></pre>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-3\">githubissa</a>, tagissa <em>part5-3</em>.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#osa-5\">5.1-5.4</a></p>\n<h2>Kirjautumislomakkeen näyttäminen vain tarvittaessa</h2>\n<p>Muutetaan sovellusta siten, että kirjautumislomaketta ei oletusarvoisesti näytetä:</p>\n<p>![]({{ \"/assets/5/3.png\" | absolute_url }})</p>\n<p>Lomake aukeaa, jos käyttäjä painaa nappia <em>login</em>:</p>\n<p>![]({{ \"/assets/5/4.png\" | absolute_url }})</p>\n<p>Napilla <em>cancel</em> käyttäjä saa tarvittaessa suljettua lomakkeen.</p>\n<p>Aloitetaan eristämällä kirjautumislomake omaksi komponentikseen:</p>\n<pre><code class=\"language-html\">const LoginForm = ({ handleSubmit, handleChange, username, password }) => {\nreturn (\n&#x3C;div>\n  &#x3C;h2>Kirjaudu&#x3C;/h2>\n\n  &#x3C;form onSubmit=\"{handleSubmit}\">\n    &#x3C;div>\n      käyttäjätunnus\n      &#x3C;input value=\"{username}\" onChange=\"{handleChange}\" name=\"username\" />\n    &#x3C;/div>\n    &#x3C;div>\n      salasana\n      &#x3C;input\n        type=\"password\"\n        name=\"password\"\n        value=\"{password}\"\n        onChange=\"{handleChange}\"\n      />\n    &#x3C;/div>\n    &#x3C;button type=\"submit\">kirjaudu&#x3C;/button>\n  &#x3C;/form>\n&#x3C;/div>\n) }\n</code></pre>\n<p>Reactin <a href=\"https://reactjs.org/docs/lifting-state-up.html\">suosittelemaan tyyliin</a> tila ja tilaa käsittelevät funktiot on kaikki määritelty komponentin ulkopuolella ja välitetään komponentille propseina.</p>\n<p>Huomaa, että propsit otetaan vastaan <em>destrukturoimalla</em>, eli sen sijaan että määriteltäisiin</p>\n<pre><code class=\"language-html\">const LoginForm = (props) => {\n  return (\n      &#x3C;form onSubmit={props.handleSubmit}>\n        &#x3C;div>\n          käyttäjätunnus\n          &#x3C;input\n            value={props.username}\n            onChange={props.handleChange}\n            name=\"username\"\n          />\n        &#x3C;/div>\n        // ...\n        &#x3C;button type=\"submit\">kirjaudu&#x3C;/button>\n      &#x3C;/form>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>jolloin muuttujan <em>props</em> kenttiin on viitattava muuttujan kautta esim. <em>props.handleSubmit</em>, otetaan kentät suoraan vastaan omiin muuttujiinsa.</p>\n<p>Nopea tapa toiminnallisuuden toteuttamiseen on muuttaa komponentin <em>App</em> käyttämä funktio <em>loginForm</em> seuraavaan muotoon:</p>\n<pre><code class=\"language-react\">const loginForm = () => {\n  const hideWhenVisible = { display: this.state.loginVisible ? 'none' : '' }\n  const showWhenVisible = { display: this.state.loginVisible ? '' : 'none' }\n\n  return (\n    &#x3C;div>\n      &#x3C;div style={hideWhenVisible}>\n        &#x3C;button onClick={e => this.setState({ loginVisible: true })}>log in&#x3C;/button>\n      &#x3C;/div>\n      &#x3C;div style={showWhenVisible}>\n        &#x3C;LoginForm\n          username={this.state.username}\n          password={this.state.password}\n          handleChange={this.handleLoginFieldChange}\n          handleSubmit={this.login}\n        />\n        &#x3C;button onClick={e => this.setState({ loginVisible: false })}>cancel&#x3C;/button>\n      &#x3C;/div>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Komponentin <em>App</em> tilaan on nyt lisätty kenttä <em>loginVisible</em> joka määrittelee sen näytetäänkö kirjautumislomake.</p>\n<p>Näkyvyyttä säätelevää tilaa vaihdellaan kahden napin avulla, molempiin on kirjoitettu tapahtumankäsittelijän koodi suoraan:</p>\n<pre><code class=\"language-react\">&#x3C;button onClick={e => this.setState({ loginVisible: true })}>log in&#x3C;/button>\n\n&#x3C;button onClick={e => this.setState({ loginVisible: false })}>cancel&#x3C;/button>\n</code></pre>\n<p>Komponenttien näkyvyys on määritelty asettamalla komponentille CSS-määrittely, jossa <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a>-propertyn arvoksi asetetaan <em>none</em> jos komponentin ei haluta näkyvän:</p>\n<pre><code class=\"language-html\">const hideWhenVisible = { display: this.state.loginVisible ? 'none' : '' } const\nshowWhenVisible = { display: this.state.loginVisible ? '' : 'none' } // ...\n\n&#x3C;div style=\"{hideWhenVisible}\">// nappi&#x3C;/div>\n\n&#x3C;div style=\"{showWhenVisible}\">// lomake&#x3C;/div>\n</code></pre>\n<p>Käytössä on taas kysymysmerkkioperaattori, eli jos <em>this.state.loginVisible</em> on <em>true</em>, tulee napin CSS-määrittelyksi</p>\n<pre><code class=\"language-css\">display: 'none';\n</code></pre>\n<p>jos <em>this.state.loginVisible</em> on <em>false</em>, ei <em>display</em> saa mitään (napin näkyvyyteen liittyvää) arvoa.</p>\n<p>Hyödynsimme mahdollisuutta määritellä React-komponenteille koodin avulla <a href=\"https://react-cn.github.io/react/tips/inline-styles.html\">inline</a>-tyylejä. Palaamme asiaan tarkemmin seuraavassa osassa.</p>\n<h2>Komponentin lapset, eli this.props.children</h2>\n<p>Kirjautumislomakkeen näkyvyyttä ympäröivän koodin voi ajatella olevan oma looginen kokonaisuutensa ja se onkin hyvä eristää pois komponentista <em>App</em> omaksi komponentikseen.</p>\n<p>Tavoitteena on luoda komponentti <em>Togglable</em>, jota käytetään seuraavalla tavalla:</p>\n<pre><code class=\"language-html\">&#x3C;Togglable buttonLabel=\"login\">\n  &#x3C;LoginForm\n    username={this.state.username}\n    password={this.state.password}\n    handleChange={this.handleLoginFieldChange}\n    handleSubmit={this.login}\n  />\n&#x3C;/Togglable>\n</code></pre>\n<p>Komponentin käyttö poikkeaa aiemmin näkemistämme siinä, että käytössä on nyt avaava ja sulkeva tagi, joiden sisällä määritellään toinen komponentti eli <em>LoginForm</em>. Reactin terminologiassa <em>LoginForm</em> on nyt komponentin <em>Togglable</em> lapsi.</p>\n<p><em>Togglablen</em> avaavan ja sulkevan tagin sisälle voi sijoittaa lapsiksi mitä tahansa React-elementtejä, esim.:</p>\n<pre><code class=\"language-html\">&#x3C;Togglable buttonLabel=\"paljasta\">\n  &#x3C;p>tämä on aluksi piilossa&#x3C;/p>\n  &#x3C;p>toinen salainen rivi&#x3C;/p>\n&#x3C;/Togglable>\n</code></pre>\n<p>Komponentin koodi on seuraavassa:</p>\n<pre><code class=\"language-react\">class Togglable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: false\n    }\n  }\n\n  toggleVisibility = () => {\n    this.setState({visible: !this.state.visible})\n  }\n\n  render() {\n    const hideWhenVisible = { display: this.state.visible ? 'none' : '' }\n    const showWhenVisible = { display: this.state.visible ? '' : 'none' }\n\n    return (\n      &#x3C;div>\n        &#x3C;div style={hideWhenVisible}>\n          &#x3C;button onClick={this.toggleVisibility}>{this.props.buttonLabel}&#x3C;/button>\n        &#x3C;/div>\n        &#x3C;div style={showWhenVisible}>\n          {this.props.children}\n          &#x3C;button onClick={this.toggleVisibility}>cancel&#x3C;/button>\n        &#x3C;/div>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p>Mielenkiintoista ja meille uutta on <a href=\"https://reactjs.org/docs/glossary.html#propschildren\">this.props.children</a>, jonka avulla koodi viittaa komponentin lapsiin, eli avaavan ja sulkevan tagin sisällä määriteltyihin React-elementteihin.</p>\n<p>Tällä kertaa lapset ainoastaan renderöidään komponentin oman renderöivän koodin seassa:</p>\n<pre><code class=\"language-html\">&#x3C;div style=\"{showWhenVisible}\">\n  {this.props.children}\n  &#x3C;button onClick=\"{this.toggleVisibility}\">cancel&#x3C;/button>\n&#x3C;/div>\n</code></pre>\n<p>Toisin kuin \"normaalit\" propsit, <em>children</em> on Reactin automaattisesti määrittelemä, aina olemassa oleva propsi. Jos komponentti määritellään automaattisesti suljettavalla eli <em>/></em> loppuvalla tagilla, esim.</p>\n<pre><code class=\"language-html\">&#x3C;Note\n  key={note.id}\n  note={note}\n  toggleImportance={this.toggleImportanceOf(note.id)}\n/>\n</code></pre>\n<p>on <em>this.props.children</em> tyhjä taulukko.</p>\n<p>Komponentti <em>Togglable</em> on uusiokäytettävä ja voimme käyttää sitä tekemään myös uuden muistiinpanon luomisesta huolehtivan formin vastaavalla tavalla tarpeen mukaan näytettäväksi.</p>\n<p>Eristetään ensin muistiinpanojen luominen omaksi komponentiksi</p>\n<pre><code class=\"language-react\">const NoteForm = ({ onSubmit, handleChange, value}) => {\n  return (\n    &#x3C;div>\n      &#x3C;h2>Luo uusi muistiinpano&#x3C;/h2>\n\n      &#x3C;form onSubmit={onSubmit}>\n        &#x3C;input\n          value={value}\n          onChange={handleChange}\n        />\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>ja määritellään lomakkeen näyttävä koodi komponentin <em>Togglable</em> sisällä</p>\n<pre><code class=\"language-html\">&#x3C;Togglable buttonLabel=\"new note\">\n  &#x3C;NoteForm\n    onSubmit={this.addNote}\n    value={this.state.newNote}\n    handleChange={this.handleNoteChange}\n  />\n&#x3C;/Togglable>\n</code></pre>\n<h2>ref eli viite komponenttiin</h2>\n<p>Ratkaisu on melko hyvä, haluaisimme kuitenkin parantaa sitä erään seikan osalta.</p>\n<p>Kun uusi muistiinpano luodaan, olisi loogista jos luomislomake menisi piiloon. Nyt lomake pysyy näkyvillä. Lomakkeen piilottamiseen sisältyy kuitenkin pieni ongelma, sillä näkyvyyttä kontrolloidaan <em>Togglable</em>-komponentin tilassa olevalla muuttujalla ja komponentissa määritellyllä metodilla <em>toggleVisibility</em>. Miten pääsemme niihin käsiksi komponentin ulkopuolelta?</p>\n<p>Koska React-komponentit ovat Javascript-olioita, on niiden metodeja mahdollista kutsua jos komponenttia vastaavaan olioon onnistutaan saamaan viite.</p>\n<p>Eräs keino viitteen saamiseen on React-komponenttien attribuutti <a href=\"https://reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-class-component\">ref</a>.</p>\n<p>Muutetaan lomakkeen renderöivää koodia seuraavasti:</p>\n<pre><code class=\"language-bash\">&#x3C;div>\n  &#x3C;Togglable buttonLabel=\"new note\" ref={component => this.noteForm = component}>\n    &#x3C;NoteForm\n      ...\n    />\n  &#x3C;/Togglable>\n&#x3C;/div>\n</code></pre>\n<p>Kun komponentti <em>Togglable</em> renderöidään, suorittaa React ref-attribuutin sisällä määritellyn funktion:</p>\n<pre><code class=\"language-js\">component => (this.noteForm = component);\n</code></pre>\n<p>parametrin <em>component</em> arvona on viite komponenttiin. Funktio tallettaa viitteen muuttujaan <em>this.noteForm</em> eli <em>App</em>-komponentin kenttään <em>noteForm</em>.</p>\n<p>Nyt mistä tahansa komponentin <em>App</em> sisältä on mahdollista päästä käsiksi uusien muistiinpanojen luomisen sisältävään <em>Togglable</em>-komponenttiin.</p>\n<p>Voimme nyt piilottaa lomakkeen kutsumalla <em>this.noteForm.toggleVisibility()</em> samalla kun uuden muistiinpanon luominen tapahtuu:</p>\n<pre><code class=\"language-js\">addNote = e => {\n  e.preventDefault();\n  this.noteForm.toggleVisibility();\n\n  // ..\n};\n</code></pre>\n<p>Refeille on myös <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">muita käyttötarkoituksia</a> kuin React-komponentteihin käsiksi pääseminen.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-4\">githubissa</a>, tagissa <em>part5-4</em>.</p>\n<h3>Huomio komponenteista</h3>\n<p>Kun Reactissa määritellään komponentti</p>\n<pre><code class=\"language-js\">class Togglable extends React.Component {\n  // ...\n}\n</code></pre>\n<p>ja otetaan se käyttöön seuraavasti</p>\n<pre><code class=\"language-react\">&#x3C;div>\n  &#x3C;Togglable buttonLabel=\"1\" ref={component => this.t1 = component}>\n    ensimmäinen\n  &#x3C;/Togglable>\n\n  &#x3C;Togglable buttonLabel=\"2\" ref={component => this.t2 = component}>\n    toinen\n  &#x3C;/Togglable>\n\n  &#x3C;Togglable buttonLabel=\"3\" ref={component => this.t3 = component}>\n    kolmas\n  &#x3C;/Togglable>\n&#x3C;/div>\n</code></pre>\n<p>syntyy <em>kolme erillistä komponenttiolioa</em>, joilla on kaikilla oma tilansa:</p>\n<p>![]({{ \"/assets/5/5.png\" | absolute_url }})</p>\n<p><em>ref</em>-attribuutin avulla on talletettu viite jokaiseen komponenttiin muuttujiin <em>this.t1</em>, <em>this.t2</em> ja <em>this.t3</em>.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#komponenttien-n%C3%A4ytt%C3%A4minen-vain-tarvittaessa\">5.5-5.10</a></p>\n<h2>PropTypes</h2>\n<p>Komponentti <em>Togglable</em> olettaa, että sille määritellään propsina <em>buttonLabel</em> napin teksti. Jos määrittely unohtuu</p>\n<pre><code class=\"language-html\">&#x3C;Togglable> buttonLabel unohtui... &#x3C;/Togglable>\n</code></pre>\n<p>Sovellus kyllä toimii, mutta selaimeen renderöityy hämäävästi nappi, jolla ei ole mitään tekstiä.</p>\n<p>Haluaisimmekin varmistaa että jos <em>Togglable</em>-komponenttia käytetään, on propsille \"pakko\" antaa arvo.</p>\n<p>Kirjaston olettamat ja edellyttämät propsit ja niiden tyypit voidaan määritellä kirjaston <a href=\"https://github.com/facebook/prop-types\">prop-types</a> avulla. Asennetaan kirjasto</p>\n<pre><code class=\"language-bash\">npm install --save prop-types\n</code></pre>\n<p><em>buttonLabel</em> voidaan määritellä <em>pakolliseksi</em> string-tyyppiseksi propsiksi seuraavasti</p>\n<pre><code class=\"language-react\">import PropTypes from 'prop-types'\n\nclass Togglable extends React.Component {\n  // ...\n}\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n</code></pre>\n<p>Jos propsia ei määritellä, seurauksena on konsoliin tulostuva virheilmoitus</p>\n<p>![]({{ \"/assets/5/6.png\" | absolute_url }})</p>\n<p>Koodi kuitenkin toimii edelleen, eli mikään ei pakota määrittelemään propseja PropTypes-määrittelyistä huolimatta. On kuitenkin erittäin epäprofessionaalia jättää konsoliin <em>mitään</em> punaisia tulosteita.</p>\n<p>Määritellään Proptypet myös <em>LoginForm</em>-komponentille:</p>\n<pre><code class=\"language-react\">import PropTypes from 'prop-types'\n\nconst LoginForm = ({ handleSubmit, handleChange, username, password }) => {\n  return (\n    // ...\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n</code></pre>\n<p>Funktionaalisen komponentin proptypejen määrittely tapahtuu samalla tavalla kuin luokkaperustaisten.</p>\n<p>Jos propsin tyyppi on väärä, esim. yritetään määritellä propsiksi <em>handleChange</em> merkkijono, seurauksena on varoitus:</p>\n<p>![]({{ \"/assets/5/7.png\" | absolute_url }})</p>\n<p>Luokkaperustaisille komponenteille PropTypet on mahdollista määritellä myös <em>luokkamuuttujina</em>, seuraavalla syntaksilla:</p>\n<pre><code class=\"language-react\">import PropTypes from 'prop-types'\n\nclass Togglable extends React.Component {\n  static propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n  }\n\n  // ...\n}\n</code></pre>\n<p>Muuttujamäärittelyn edessä oleva <em>static</em> määrittelee nyt, että <em>propTypes</em>-kenttä on nimenomaan komponentin määrittelevällä luokalla <em>Togglable</em> eikä luokan instansseilla. Oleellisesti ottaen kyseessä on ainoastaan Javascriptin vielä standardoimattoman <a href=\"https://github.com/tc39/proposal-class-fields\">ominaisuuden</a> mahdollistava syntaktinen oikotie määritellä seuraava:</p>\n<pre><code class=\"language-js\">Togglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n};\n</code></pre>\n<p>Surffatessasi internetissä saatat vielä nähdä ennen Reactin versiota 0.16 tehtyjä esimerkkejä, joissa PropTypejen käyttö ei edellytä erillistä kirjastoa. Versiosta 0.16 alkaen PropTypejä ei enää määritelty React-kirjastossa itsessään ja kirjaston <em>prop-types</em> käyttö on pakollista.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävä <a href=\"/teht%C3%A4v%C3%A4t#proptypet\">5.11</a></p>\n<h2>React-sovelluksen testaus</h2>\n<p>Reactilla tehtyjen frontendien testaamiseen on monia tapoja. Aloitetaan niihin tutustuminen nyt.</p>\n<p>Testit tehdään samaan tapaan kuin edellisessä osassa eli Facebookin <a href=\"http://jestjs.io/\">Jest</a>-kirjastolla. Jest onkin valmiiksi konfiguroitu create-react-app:illa luotuihin projekteihin.</p>\n<p>Jestin lisäksi käytetään AirBnB:n kehittämää <a href=\"https://github.com/airbnb/enzyme\">enzyme</a>-kirjastoa.</p>\n<p>Asennetaan enzyme komennolla:</p>\n<pre><code class=\"language-bash\">npm install --save-dev enzyme enzyme-adapter-react-16\n</code></pre>\n<p>Testataan aluksi muistiinpanon renderöivää komponenttia:</p>\n<pre><code class=\"language-html\">const Note = ({ note, toggleImportance }) => { const label = note.important ?\n'make not important' : 'make important' return (\n&#x3C;div className=\"wrapper\">\n  &#x3C;div className=\"content\">{note.content}&#x3C;/div>\n  &#x3C;div>&#x3C;button onClick=\"{toggleImportance}\">{label}&#x3C;/button>&#x3C;/div>\n&#x3C;/div>\n) }\n</code></pre>\n<p>Testauksen helpottamiseksi komponenttiin on lisätty sisällön määrittelevälle <em>div</em>-elementille <a href=\"https://reactjs.org/docs/dom-elements.html#classname\">CSS-luokka</a> <em>content</em>.</p>\n<h3>shallow-renderöinti</h3>\n<p>Ennen testien tekemistä, tehdään <em>enzymen</em> konfiguraatioita varten tiedosto <em>src/setupTests.js</em> ja sille seuraava sisältö:</p>\n<pre><code class=\"language-js\">import { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n</code></pre>\n<p>Nyt olemme valmiina testien tekemiseen.</p>\n<p>Koska <em>Note</em> on yksinkertainen komponentti, joka ei käytä yhtään monimutkaista alikomponenttia vaan renderöi suoraan HTML:ää, sopii sen testaamiseen hyvin enzymen <a href=\"http://airbnb.io/enzyme/docs/api/shallow.html\">shallow</a>-renderöijä.</p>\n<p>Tehdään testi tiedostoon <em>src/components/Note.test.js</em>, eli samaan hakemistoon, missä komponentti itsekin sijaitsee.</p>\n<p>Ensimmäinen testi varmistaa, että komponentti renderöi muistiinpanon sisällön:</p>\n<pre><code class=\"language-html\">import React from 'react'\nimport { shallow } from 'enzyme'\nimport Note from './Note'\n\ndescribe.only('&#x3C;Note />', () => {\n  it('renders content', () => {\n    const note = {\n      content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n      important: true\n    }\n\n    const noteComponent = shallow(&#x3C;Note note={note} />)\n    const contentDiv = noteComponent.find('.content')\n\n    expect(contentDiv.text()).toContain(note.content)\n  })\n})\n</code></pre>\n<p>Edellisessä osassa määrittelimme testitapaukset metodin <a href=\"https://facebook.github.io/jest/docs/en/api.html#testname-fn-timeout\">test</a> avulla. Nyt käytössä oleva <em>it</em> viittaa samaan olioon kuin <em>test</em>, eli on sama kumpaa käytät. It on tietyissä piireissä suositumpi ja käytössä mm. Enzymen dokumentaatiossa joten käytämme it-muotoa tässä osassa.</p>\n<p>Alun konfiguroinnin jälkeen testi renderöi komponentin metodin <em>shallow</em> avulla:</p>\n<pre><code class=\"language-html\">const noteComponent = shallow(&#x3C;Note note={note} />)\n</code></pre>\n<p>Normaalisti React-komponentit renderöityvät <em>DOM</em>:iin. Nyt kuitenkin renderöimme komponentteja <a href=\"http://airbnb.io/enzyme/docs/api/shallow.html\">shallowWrapper</a>-tyyppisiksi, testaukseen sopiviksi olioiksi.</p>\n<p>ShallowWrapper-muotoon renderöidyillä React-komponenteilla on runsaasti metodeja, joiden avulla niiden sisältöä voidaan tutkia. Esimerkiksi <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/find.html\">find</a> mahdollistaa komponentin sisällä olevien <em>elementtien</em> etsimisen <a href=\"http://airbnb.io/enzyme/docs/api/selector.html\">enzyme-selektorien</a> avulla. Eräs tapa elementtien etsimiseen on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">CSS-selektorien</a> käyttö. Liitimme muistiinpanon sisällön kertovaan div-elementtiin luokan <em>content</em>, joten voimme etsiä elementin seuraavasti:</p>\n<pre><code class=\"language-js\">const contentDiv = noteComponent.find('.content');\n</code></pre>\n<p>ekspektaatiossa varmistamme, että elementtiin on renderöitynyt oikea teksti, eli muistiinpanon sisältö:</p>\n<pre><code class=\"language-js\">expect(contentDiv.text()).toContain(note.content);\n</code></pre>\n<h3>Testien suorittaminen</h3>\n<p>Create-react-app:issa on konfiguroitu testit oletusarvoisesti suoritettavaksi ns. watch-moodissa, eli jos suoritat testit komennolla <em>npm test</em>, jää konsoli odottamaan koodissa tapahtuvia muutoksia. Muutosten jälkeen testit suoritetaan automaattisesti ja Jest alkaa taas odottamaan uusia muutoksia koodiin.</p>\n<p>Jos haluat ajaa testit \"normaalisti\", se onnistuu komennolla</p>\n<pre><code class=\"language-bash\">CI=true npm test\n</code></pre>\n<p>Konsoli saattaa herjata virhettä, jos sinulla ei ole asennettuna watchmania. Watchman on Facebookin kehittämä tiedoston muutoksia tarkkaileva ohjelma. Ohjelma nopeuttaa testien ajoa ja ainakin osx sierrasta ylöspäin jatkuva testien vahtiminen aiheuttaa käyttäjillä virheilmoituksia. Näistä ilmoituksista pääsee eroon asentamalla Watchmanin.</p>\n<p>Ohjeet ohjelman asentamiseen eri käyttöjärjestelmille löydät Watchmanin sivulta:\n<a href=\"https://facebook.github.io/watchman/\">https://facebook.github.io/watchman/</a></p>\n<p>Mikäli testejä suoritettaessa ei löydetä tiedostossa <em>src/setupTests.js</em> tehtyä adapterin konfigurointia, auttaa seuraavan asetuksen lisääminen tiedostoon package-lock.json:</p>\n<pre><code>  \"jest\": {\n    ...\n    \"setupFiles\": [\n      \"&#x3C;rootDir>/src/setupTests.js\"\n    ],\n    ...\n  }\n</code></pre>\n<h3>Testien sijainti</h3>\n<p>Reactissa on (ainakin) <a href=\"https://medium.com/@JeffLombardJr/organizing-tests-in-jest-17fc431ff850\">kaksi erilaista</a> konventiota testien sijoittamiseen. Sijoitimme testit ehkä vallitsevan tavan mukaan, eli samaan hakemistoon missä testattava komponentti sijaitsee.</p>\n<p>Toinen tapa olisi sijoittaa testit \"normaaliin\" tapaan omaan erilliseen hakemistoon. Valitaanpa kumpi tahansa tapa, on varmaa että se on jonkun mielestä täysin väärä.</p>\n<p>Itse en pidä siitä, että testit ja normaali koodi ovat samassa hakemistossa. Noudatamme kuitenkin nyt tätä tapaa, sillä se on oletusarvo create-react-app:illa konfiguroiduissa sovelluksissa.</p>\n<h3>Testien debuggaaminen</h3>\n<p>Testejä tehdessä törmäämme tyypillisesti erittäin moniin ongelmiin. Näissä tilanteissa vanha kunnon <em>console.log</em> on hyödyllinen. Voimme tulostaa <em>shallow</em>-metodin avulla renderöityjä komponentteja ja niiden sisällä olevia elementtejä metodin <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/debug.html\">debug</a> avulla:</p>\n<pre><code class=\"language-bash\">describe.only('&#x3C;Note />', () => {\n  it('renders content', () => {\n    const note = {\n      content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n      important: true\n    }\n\n    const noteComponent = shallow(&#x3C;Note note={note} />)\n    console.log(noteComponent.debug())\n\n\n    const contentDiv = noteComponent.find('.content')\n    console.log(contentDiv.debug())\n\n    // ...\n  })\n})\n</code></pre>\n<p>Konsoliin tulostuu komponentin generoima html:</p>\n<pre><code class=\"language-bash\">console.log src/components/Note.test.js:16\n  &#x3C;div className=\"wrapper\">\n    &#x3C;div className=\"content\">\n      Komponenttitestaus tapahtuu jestillä ja enzymellä\n    &#x3C;/div>\n    &#x3C;div>\n      &#x3C;button onClick={[undefined]}>\n        make not important\n      &#x3C;/button>\n    &#x3C;/div>\n  &#x3C;/div>\n\nconsole.log src/components/Note.test.js:20\n  &#x3C;div className=\"content\">\n    Komponenttitestaus tapahtuu jestillä ja enzymellä\n  &#x3C;/div>\n</code></pre>\n<h3>Nappien painelu testeissä</h3>\n<p>Sisällön näyttämisen lisäksi toinen <em>Note</em>-komponenttien vastuulla oleva asia on huolehtia siitä, että painettaessa noten yhteydessä olevaa nappia, tulee propsina välitettyä tapahtumankäsittelijäfunktiota <em>toggleImportance</em> kutsua.</p>\n<p>Testaus onnistuu seuraavasti:</p>\n<pre><code class=\"language-bash\">it('clicking the button calls event handler once', () => {\n  const note = {\n    content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n    important: true\n  }\n\n  const mockHandler = jest.fn()\n\n  const noteComponent = shallow(\n    &#x3C;Note\n      note={note}\n      toggleImportance={mockHandler}\n    />\n  )\n\n  const button = noteComponent.find('button')\n  button.simulate('click')\n\n  expect(mockHandler.mock.calls.length).toBe(1)\n})\n</code></pre>\n<p>Testissä on muutama mielenkiintoinen seikka. Tapahtumankäsittelijäksi annetaan Jestin avulla määritelty <a href=\"https://facebook.github.io/jest/docs/en/mock-functions.html\">mock</a>-funktio:</p>\n<pre><code class=\"language-js\">const mockHandler = jest.fn();\n</code></pre>\n<p>Testi hakee renderöidystä komponentista <em>button</em>-elementin ja klikkaa sitä. Koska komponentissa on ainoastaan yksi nappi, on sen hakeminen helppoa:</p>\n<pre><code class=\"language-js\">const button = noteComponent.find('button');\nbutton.simulate('click');\n</code></pre>\n<p>Klikkaaminen tapahtuu metodin <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html\">simulate</a> avulla.</p>\n<p>Testin ekspektaatio varmistaa, että <em>mock-funktiota</em> on kutsuttu täsmälleen kerran:</p>\n<pre><code class=\"language-js\">expect(mockHandler.mock.calls.length).toBe(1);\n</code></pre>\n<p><a href=\"https://en.wikipedia.org/wiki/Mock_object\">Mockoliot ja -funktiot</a> ovat testauksessa yleisesti käytettyjä valekomponentteja, joiden avulla korvataan testattavien komponenttien riippuvuuksia, eli niiden tarvitsemia muita komponentteja. Mockit mahdollistavat mm. kovakoodattujen syötteiden palauttamisen sekä niiden metodikutsujen lukumäärän sekä parametrien testauksen aikaisen tarkkailun.</p>\n<p>Esimerkissämme mock-funktio sopi tarkoitukseen erinomaisesti, sillä sen avulla on helppo varmistaa, että metodia on kutsuttu täsmälleen kerran.</p>\n<h3>Komponentin <em>Togglable</em> testit</h3>\n<p>Tehdään komponentille <em>Togglable</em> muutama testi. Lisätään komponentin lapset renderöivään div-elementtiin CSS-luokka <em>togglableContent</em>:</p>\n<pre><code class=\"language-react\">class Togglable extends React.Component {\n\n  render() {\n    const hideWhenVisible = { display: this.state.visible ? 'none' : '' }\n    const showWhenVisible = { display: this.state.visible ? '' : 'none' }\n\n    return (\n      &#x3C;div>\n        &#x3C;div style={hideWhenVisible}>\n          &#x3C;button onClick={this.toggleVisibility}>{this.props.buttonLabel}&#x3C;/button>\n        &#x3C;/div>\n        &#x3C;div style={showWhenVisible} className=\"togglableContent\">\n          {this.props.children}\n          &#x3C;button onClick={this.toggleVisibility}>cancel&#x3C;/button>\n        &#x3C;/div>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p>Testit ovat seuraavassa</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport { shallow } from 'enzyme'\nimport Adapter from 'enzyme-adapter-react-16'\nimport Note from './Note'\nimport Togglable from './Togglable'\n\ndescribe('&#x3C;Togglable />', () => {\n  let togglableComponent\n\n  beforeEach(() => {\n    togglableComponent = shallow(\n      &#x3C;Togglable buttonLabel=\"show...\">\n        &#x3C;div className=\"testDiv\" />\n      &#x3C;/Togglable>\n    )\n  })\n\n  it('renders its children', () => {\n    expect(togglableComponent.contains(&#x3C;div className=\"testDiv\" />)).toEqual(true)\n  })\n\n  it('at start the children are not displayed', () => {\n    const div = togglableComponent.find('.togglableContent')\n    expect(div.getElement().props.style).toEqual({ display: 'none' })\n  })\n\n  it('after clicking the button, children are displayed', () => {\n    const button = togglableComponent.find('button')\n\n    button.at(0).simulate('click')\n    const div = togglableComponent.find('.togglableContent')\n    expect(div.getElement().props.style).toEqual({ display: '' })\n  })\n\n})\n</code></pre>\n<p>Ennen jokaista testiä suoritettava <em>beforeEach</em> alustaa shallow-renderöimällä <em>Togglable</em>-komponentin muuttujaan <em>togglableComponent</em>.</p>\n<p>Ensimmäinen testi tarkastaa, että <em>Togglable</em> renderöi lapsikomponentin <em><div className=\"testDiv\" /></em>. Loput testit varmistavat, että Togglablen sisältämä lapsikomponentti on alussa näkymättömissä, eli sen sisältävään <em>div</em>-elementtiin liittyy tyyli <em>{ display: 'none' }</em>, ja että nappia painettaessa komponentti näkyy, eli tyyli on <em>{ display: '' }</em>. Koska Togglablessa on kaksi nappia, painallusta simuloidessa niistä pitää valita oikea, eli tällä kertaa ensimmäinen.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#komponenttien-testaaminen\">5.12-14</a></p>\n<h3>mount ja full DOM -renderöinti</h3>\n<p>Käyttämämme <em>shallow</em>-renderöijä on useimmista tapauksissa riittävä. Joskus tarvitsemme kuitenkin järeämmän työkalun sillä <em>shallow</em> renderöi ainoastaan \"yhden tason\", eli sen komponentin, jolle metodia kutsutaan.</p>\n<p>Jos yritämme esim. sijoittaa kaksi <em>Note</em>-komponenttia <em>Togglable</em>-komponentin sisälle ja tulostamme syntyvän <em>ShallowWrapper</em> -olion</p>\n<pre><code class=\"language-bash\">it('shallow renders only one level', () => {\n  const note1 = {\n    content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n    important: true\n  }\n  const note2 = {\n    content: 'shallow ei renderöi alikomponentteja',\n    important: true\n  }\n\n  const togglableComponent = shallow(\n    &#x3C;Togglable buttonLabel=\"show...\">\n      &#x3C;Note note={note1} />\n      &#x3C;Note note={note2} />\n    &#x3C;/Togglable>\n  )\n\n  console.log(togglableComponent.debug())\n})\n</code></pre>\n<p>huomaamme, että <em>Togglable</em> komponentti on renderöitynyt, eli \"muuttunut\" HTML:ksi, mutta sen sisällä olevat <em>Note</em>-komponentit eivät ole HTML:ää vaan React-komponentteja.</p>\n<pre><code class=\"language-bash\">&#x3C;div>\n  &#x3C;div style={{...}}>\n    &#x3C;button onClick={[Function]}>\n      show...\n    &#x3C;/button>\n  &#x3C;/div>\n  &#x3C;div style={{...}} className=\"togglableContent\">\n    &#x3C;Note note={{...}} />\n    &#x3C;Note note={{...}} />\n    &#x3C;button onClick={[Function]}>\n      cancel\n    &#x3C;/button>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>Jos komponentille tehdään edellisten esimerkkien tapaan yksikkötestejä, <em>shallow</em>-renderöinti on useimmiten riittävä. Jos haluamme testata isompia kokonaisuuksia, eli tehdä frontendin <em>integraatiotestausta</em>, ei <em>shallow</em>-renderöinti riitä vaan on turvauduttava komponentit kokonaisuudessaan renderöivään <a href=\"http://airbnb.io/enzyme/docs/api/mount.html\">mount</a>:iin.</p>\n<p>Muutetaan testi käyttämään <em>shallowin</em> sijaan <em>mountia</em>:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport { shallow, mount } from 'enzyme'\nimport Note from './Note'\nimport Togglable from './Togglable'\n\nit('mount renders all components', () => {\n  const note1 = {\n    content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n    important: true\n  }\n  const note2 = {\n    content: 'mount renderöi myös alikomponentit',\n    important: true\n  }\n\n  const noteComponent = mount(\n    &#x3C;Togglable buttonLabel=\"show...\">\n      &#x3C;Note note={note1} />\n      &#x3C;Note note={note2} />\n    &#x3C;/Togglable>\n  )\n\n  console.log(noteComponent.debug())\n})\n</code></pre>\n<p>Tuloksena on kokonaisuudessaan HTML:ksi renderöitynyt <em>Togglable</em>-komponentti:</p>\n<pre><code class=\"language-bash\">&#x3C;Togglable buttonLabel=\"show...\">\n  &#x3C;div>\n    &#x3C;div style={{...}}>\n      &#x3C;button onClick={[Function]}>\n        show...\n      &#x3C;/button>\n    &#x3C;/div>\n    &#x3C;div style={{...}} className=\"togglableContent\">\n      &#x3C;Note note={{...}}>\n        &#x3C;div className=\"wrapper\">\n          &#x3C;div className=\"content\">\n            Komponenttitestaus tapahtuu jestillä ja enzymellä\n          &#x3C;/div>\n          &#x3C;div>\n            &#x3C;button onClick={[undefined]}>\n              make not important\n            &#x3C;/button>\n          &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/Note>\n      &#x3C;Note note={{...}}>\n        &#x3C;div className=\"wrapper\">\n          &#x3C;div className=\"content\">\n            mount renderöi myös alikomponentit\n          &#x3C;/div>\n          &#x3C;div>\n            &#x3C;button onClick={[undefined]}>\n              make not important\n            &#x3C;/button>\n          &#x3C;/div>\n        &#x3C;/div>\n      &#x3C;/Note>\n      &#x3C;button onClick={[Function]}>\n        cancel\n      &#x3C;/button>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/Togglable>\n</code></pre>\n<p>Mountin avulla renderöitäessä testi pääsee siis käsiksi periaatteessa samaan HTML-koodiin, joka todellisuudessa renderöidään selaimeen ja tämä luonnollisesti mahdollistaa huomattavasti monipuolisemman testauksen kuin <em>shallow</em>-renderöinti. Komennolla <em>mount</em> tapahtuva renderöinti on kuitenkin hitaampaa, joten jos <em>shallow</em> riittää, sitä kannattaa käyttää.</p>\n<p>Huomaa, että testin käyttämä metodi <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/debug.html\">debug</a> ei palauta todellista HTML:ää vaan debuggaustarkoituksiin sopivan tekstuaalisen esitysmuodon komponentista. Todellisessa HTML:ssä ei mm. ole ollenkaan React-komponenttien tageja.</p>\n<p>Jos on tarvetta tietää, mikä on testattaessa syntyvä todellinen HTML, sen saa selville metodilla <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/html.html\">html</a>.</p>\n<p>Jos muutamme testin viimeisen komennon muotoon</p>\n<pre><code class=\"language-js\">console.log(noteComponent.html());\n</code></pre>\n<p>tulostuu todellinen HTML:</p>\n<pre><code class=\"language-html\">&#x3C;div>\n  &#x3C;div>&#x3C;button>show...&#x3C;/button>&#x3C;/div>\n  &#x3C;div style=\"display: none;\">\n    &#x3C;div class=\"wrapper\">\n      &#x3C;div class=\"content\">\n        Komponenttitestaus tapahtuu jestillä ja enzymellä\n      &#x3C;/div>\n      &#x3C;div>&#x3C;button>make not important&#x3C;/button>&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class=\"wrapper\">\n      &#x3C;div class=\"content\">mount renderöi myös alikomponentit&#x3C;/div>\n      &#x3C;div>&#x3C;button>make not important&#x3C;/button>&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;button>cancel&#x3C;/button>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>Komento <em>mount</em> palauttaa renderöidyn \"komponenttipuun\" <a href=\"https://airbnb.io/enzyme/docs/api/mount.html#mountnode-options--reactwrapper\">ReactWrapper</a>-tyyppisenä oliona, joka tarjoaa hyvin samantyyppisen rajapinnan komponentin sisällön tutkimiseen kuin <em>ShallowWrapper</em>.</p>\n<h3>Lomakkeiden testaus</h3>\n<p>Lomakkeiden testaaminen Enzymellä on jossain määrin haasteellista. Enzymen dokumentaatio ei mainitse lomakkeista sanaakaan. <a href=\"https://github.com/airbnb/enzyme/issues/364\">Issueissa</a> asiasta kuitenkin keskustellaan.</p>\n<p>Tehdään testi komponentille <em>NoteForm</em>. Lomakkeen koodi näyttää seuraavalta</p>\n<pre><code class=\"language-react\">const NoteForm = ({ onSubmit, handleChange, value }) => {\n  return (\n    &#x3C;div>\n      &#x3C;h2>Luo uusi muistiinpano&#x3C;/h2>\n\n      &#x3C;form onSubmit={onSubmit}>\n        &#x3C;input\n          value={value}\n          onChange={handleChange}\n        />\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Lomakkeen toimintaperiaatteena on synkronoida lomakkeen tila sen ulkopuolella olevan React-komponentin tilaan. Lomakettamme on jossain määrin vaikea testata yksistään.</p>\n<p>Teemmekin testejä varten apukomponentin <em>Wrapper</em>, joka renderöi <em>NoteForm</em>:in ja hallitsee lomakkeen tilaa:</p>\n<pre><code class=\"language-react\">class Wrapper extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      formInput: ''\n    }\n  }\n  onChange = (e) => {\n    this.setState({ formInput: e.target.value })\n  }\n  render() {\n    return (\n      &#x3C;NoteForm\n        value={this.state.formInput}\n        onSubmit={this.props.onSubmit}\n        handleChange={this.onChange}\n      />\n  )}\n}\n</code></pre>\n<p>Testi on seuraavassa:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport { mount } from 'enzyme'\nimport NoteForm from './NoteForm'\n\nit('renders content', () => {\n  const onSubmit = jest.fn()\n\n  const wrapper = mount(\n    &#x3C;Wrapper onSubmit={onSubmit} />\n  )\n\n  const input = wrapper.find('input')\n  const button = wrapper.find('button')\n\n  input.simulate('change', { target: { value: 'lomakkeiden testaus on hankalaa' } })\n  button.simulate('submit')\n\n  expect(wrapper.state().formInput).toBe('lomakkeiden testaus on hankalaa')\n  expect(onSubmit.mock.calls.length).toBe(1)\n})\n</code></pre>\n<p>Testi luo <em>Wrapper</em>-komponentin, jolle se välittää propseina mockatun funktion <em>onSubmit</em>. Wrapper välittää funktion edelleen <em>NoteFormille</em> tapahtuman <em>onSubmit</em> käsittelijäksi.</p>\n<p>Syötekenttään <em>input</em> kirjoittamista simuloidaan tekemällä syötekenttään tapahtuma <em>change</em> ja määrittelemällä sopiva olio, joka määrittelee syötekenttään 'kirjoitetun' sisällön.</p>\n<p>Lomakkeen nappia tulee painaa simuloimalla tapahtumaa <em>submit</em>, tapahtuma <em>click</em> ei lähetä lomaketta.</p>\n<p>Testin ensimmäinen ekspektaatio tutkii komponentin <em>Wrapper</em> tilaa metodilla <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/state.html\">state</a>, ja varmistaa, että lomakkeelle kirjoitettu teksti on siirtynyt tilaan. Toinen ekspektaatio varmistaa, että lomakkeen lähetys on aikaansaanut tapahtumankäsittelijän kutsumisen.</p>\n<h2>Frontendin integraatiotestaus</h2>\n<p>Suoritimme edellisessä osassa backendille integraatiotestejä, jotka testasivat backendin tarjoaman API:n läpi backendia ja tietokantaa. Backendin testauksessa tehtiin tietoinen päätös olla kirjoittamatta yksikkötestejä sillä backendin koodi on melko suoraviivaista ja ongelmat tulevatkin esiin todennäköisemmin juuri monimutkaisemmissa skenaarioissa, joita integraatiotestit testaavat hyvin.</p>\n<p>Toistaiseksi kaikki frontendiin tekemämme testit ovat olleet yksittäisten komponenttien oikeellisuutta valvovia yksikkötestejä. Yksikkötestaus on toki tärkeää, mutta kattavinkaan yksikkötestaus ei riitä antamaan riittävää luotettavuutta sille, että järjestelmä toimii kokonaisuudessaan.</p>\n<p>Tehdään nyt sovellukselle yksi integraatiotesti. Integraatiotestaus on huomattavasti komponenttien yksikkötestausta hankalampaa. Erityisesti sovelluksemme kohdalla ongelmia aiheuttaa kaksi seikkaa: sovellus hakee näytettävät muistiinpanot palvelimelta <em>ja</em> sovellus käyttää local storagea kirjautuneen käyttäjän tietojen tallettamiseen.</p>\n<p>Local storage ei ole oletusarvoiseti käytettävissä testejä suorittaessa, sillä kyseessä on selaimen tarjoama toiminnallisuus ja testit ajetaan selaimen ulkopuolella. Ongelma on helppo korjata määrittelemällä testien suorituksen ajaksi <em>mock</em> joka matkii local storagea. Tapoja tähän on <a href=\"https://stackoverflow.com/questions/32911630/how-do-i-deal-with-localstorage-in-jest-tests\">monia</a>.</p>\n<p>Koska testimme ei edellytä local storagelta juuri mitään toiminnallisuutta, teemme tiedostoon <a href=\"https://github.com/facebookincubator/create-react-app/blob/ed5c48c81b2139b4414810e1efe917e04c96ee8d/packages/react-scripts/template/README.md#initializing-test-environment\">src/setupTests.js</a> hyvin yksinkertaisen mockin</p>\n<pre><code class=\"language-js\">let savedItems = {};\n\nconst localStorageMock = {\n  setItem: (key, item) => {\n    savedItems[key] = item;\n  },\n  getItem: key => savedItems[key],\n  clear: (savedItems = {}),\n};\n\nwindow.localStorage = localStorageMock;\n</code></pre>\n<p>Toinen ongelmistamme on se, että sovellus hakee näytettävät muistiinpanot palvelimelta. Muistiinpanojen haku tapahtuu heti komponentin <em>App</em> luomisen jälkeen, kun metodi <em>componentDidMount</em> kutsuu <em>noteService</em>:n metodia <em>getAll</em>:</p>\n<pre><code class=\"language-js\">componentDidMount() {\n  noteService.getAll().then(notes =>\n    this.setState({ notes })\n  )\n\n  // ...\n}\n</code></pre>\n<p>Jestin <a href=\"https://facebook.github.io/jest/docs/en/manual-mocks.html#content\">manual mock</a> -konsepti tarjoaa tilanteeseen hyvän ratkaisun. Manual mockien avulla voidaan kokonainen moduuli, tässä tapauksessa <em>noteService</em> korvata testien ajaksi vaihtoehtoisella esim. kovakoodattua dataa tarjoavalla toiminnallisuudella.</p>\n<p>Luodaan Jestin ohjeiden mukaisesti hakemistoon <em>src/services</em> alihakemisto ___mocks___ (alussa ja lopussa kaksi alaviivaa) ja sinne tiedosto _notes.js_ jonka määrittelemä metodi <em>getAll</em> palauttaa kovakoodatun listan muistiinpanoja:</p>\n<pre><code class=\"language-js\">let token = null;\n\nconst notes = [\n  {\n    id: '5a451df7571c224a31b5c8ce',\n    content: 'HTML on helppoa',\n    date: '2017-12-28T16:38:15.541Z',\n    important: false,\n    user: {\n      _id: '5a437a9e514ab7f168ddf138',\n      username: 'mluukkai',\n      name: 'Matti Luukkainen',\n    },\n  },\n  {\n    id: '5a451e21e0b8b04a45638211',\n    content: 'Selain pystyy suorittamaan vain javascriptiä',\n    date: '2017-12-28T16:38:57.694Z',\n    important: true,\n    user: {\n      _id: '5a437a9e514ab7f168ddf138',\n      username: 'mluukkai',\n      name: 'Matti Luukkainen',\n    },\n  },\n  {\n    id: '5a451e30b5ffd44a58fa79ab',\n    content: 'HTTP-protokollan tärkeimmät metodit ovat GET ja POST',\n    date: '2017-12-28T16:39:12.713Z',\n    important: true,\n    user: {\n      _id: '5a437a9e514ab7f168ddf138',\n      username: 'mluukkai',\n      name: 'Matti Luukkainen',\n    },\n  },\n];\n\nconst getAll = () => {\n  return Promise.resolve(notes);\n};\n\nexport default { getAll, notes };\n</code></pre>\n<p>Määritelty metodi <em>getAll</em> palauttaa muistiinpanojen listan käärittynä promiseksi metodin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve</a> avulla sillä käytettäessä metodia, oletetaan sen paluuarvon olevan promise:</p>\n<pre><code class=\"language-js\">noteService.getAll().then(notes =>\n</code></pre>\n<p>Olemme valmiina määrittelemään testin:</p>\n<pre><code class=\"language-js\">import React from 'react';\nimport { mount } from 'enzyme';\nimport App from './App';\nimport Note from './components/Note';\njest.mock('./services/notes');\nimport noteService from './services/notes';\n\ndescribe('&#x3C;App />', () => {\n  let app;\n  beforeAll(() => {\n    app = mount(&#x3C;App />);\n  });\n\n  it('renders all notes it gets from backend', () => {\n    app.update();\n    const noteComponents = app.find(Note);\n    expect(noteComponents.length).toEqual(noteService.notes.length);\n  });\n});\n</code></pre>\n<p>Komennolla <em>jest.mock('./services/notes')</em> otetaan juuri määritelty mock käyttöön. Loogisempi paikka komennolle olisi kenties testien määrittelyt tekevä tiedosto <em>src/setupTests.js</em></p>\n<p>Testin toimivuuden kannalta on oleellista metodin <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/update.html\">app.update</a> kutsuminen, näin pakotetaan sovellus renderöitymään uudelleen siten, että myös mockatun backendin palauttamat muistiinpanot renderöityvät.</p>\n<h2>Testauskattavuus</h2>\n<p><a href=\"https://github.com/facebookincubator/create-react-app/blob/ed5c48c81b2139b4414810e1efe917e04c96ee8d/packages/react-scripts/template/README.md#coverage-reporting\">Testauskattavuus</a> saadaan helposti selville suorittamalla testit komennolla</p>\n<pre><code class=\"language-bash\">CI=true npm test -- --coverage\n</code></pre>\n<p>![]({{ \"/assets/5/8.png\" | absolute_url }})</p>\n<p>Melko primitiivinen HTML-muotoinen raportti generoituu hakemistoon <em>coverage/lcov-report</em>. HTML-muotoinen raportti kertoo mm. yksittäisen komponenttien testaamattomat koodirivit:</p>\n<p>![]({{ \"/assets/5/9.png\" | absolute_url }})</p>\n<p>Huomaamme, että parannettavaa jäi vielä runsaasti.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-5\">githubissa</a>, tagissa <em>part5-5</em>.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#integraatiotestaus\">5.15 ja 5.16</a></p>\n<h2>Snapshot-testaus</h2>\n<p>Jest tarjoaa \"perinteisen\" testaustavan lisäksi aivan uudenlaisen tavan testaukseen, ns. <a href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html\">snapshot</a>-testauksen. Mielenkiintoista snapshot-testauksessa on se, että sovelluskehittäjän ei tarvitse itse määritellä ollenkaan testejä, snapshot-testauksen käyttöönotto riittää.</p>\n<p>Periaatteena on verrata komponenttien määrittelemää HTML:ää aina koodin muutoksen jälkeen siihen, minkälaisen HTML:n komponentit määrittelivät ennen muutosta.</p>\n<p>Jos snapshot-testi huomaa muutoksen komponenttien määrittelemässä HTML:ssä, voi kyseessä joko olla haluttu muutos tai vahingossa aiheutettu \"bugi\". Snapshot-testi huomauttaa sovelluskehittäjälle, jos komponentin määrittelemä HTML muuttuu. Sovelluskehittäjä kertoo muutosten yhteydessä, oliko muutos haluttu. Jos muutos tuli yllätyksenä, eli kyseessä oli bugi, sovelluskehittäjä huomaa sen snapshot-testauksen ansiosta nopeasti.</p>\n<h2>End to end -testaus</h2>\n<p>Olemme tehneet sekä backendille että frontendille hieman niitä kokonaisuutena testaavia integraatiotestejä. Eräs tärkeä testauksen kategoria on vielä käsittelemättä, <a href=\"https://en.wikipedia.org/wiki/System_testing\">järjestelmää kokonaisuutena</a> testaavat \"end to end\" (eli E2E) -testit.</p>\n<p>Web-sovellusten E2E-testaus tapahtuu simuloidun selaimen avulla esimerkiksi <a href=\"http://www.seleniumhq.org\">Selenium</a>-kirjastoa käyttäen. Toinen vaihtoehto on käyttää ns. <a href=\"https://en.wikipedia.org/wiki/Headless_browser\">headless browseria</a> eli selainta, jolla ei ole ollenkaan graafista käyttöliittymää. Esim. Chromea on mahdollista suorittaa Headless-moodissa.</p>\n<p>E2E testit ovat potentiaalisesti kaikkein hyödyllisin testikategoria, sillä ne tutkivat järjestelmää saman rajapinnan kautta kuin todelliset käyttäjät.</p>\n<p>E2E-testeihin liittyy myös ikäviä puolia. Niiden konfigurointi on haastavampaa kuin yksikkö- ja integraatiotestien. E2E-testit ovat tyypillisesti myös melko hitaita ja isommassa ohjelmistossa niiden suoritusaika voi helposti nousta minuutteihin, tai jopa tunteihin. Tämä on ikävää sovelluskehityksen kannalta, sillä sovellusta koodatessa on erittäin hyödyllistä pystyä ajamaan testejä mahdollisimman usein koodin regressioiden varalta.</p>\n<p>Palaamme end to end -testeihin kurssin viimeisessä, eli seitsemännessä osassa.</p>\n<h2>Sovellusten tilan hallinta Reduxilla</h2>\n<p>Olemme noudattaneet sovelluksen tilan hallinnassa Reactin suosittelemaa käytäntöä määritellä tila ja sitä käsittelevät metodit <a href=\"https://reactjs.org/docs/lifting-state-up.html\">sovelluksen juurikomponentissa</a>. Tilaa ja metodeja on välitetty propsien avulla niitä tarvitseville komponenteille. Tämä toimii johonkin pisteeseen saakka, mutta kun sovellusten koko kasvaa, muuttuu tilan hallinta haasteelliseksi.</p>\n<h3>Flux-arkkitehtuuri</h3>\n<p>Facebook kehitti tilan hallinnan ongelmia helpottamaan <a href=\"https://facebook.github.io/flux/docs/in-depth-overview.html#content\">Flux</a>-arkkitehtuurin. Fluxissa sovelluksen tilan hallinta erotetaan kokonaan Reactin komponenttien ulkopuolisiin varastoihin eli <em>storeihin</em>. Storessa olevaa tilaa ei muuteta suoraan, vaan tapahtumien eli <em>actionien</em> avulla.</p>\n<p>Kun action muuttaa storen tilaa, renderöidään näkymät uudelleen:</p>\n<p><img src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png\"></p>\n<p>Jos sovelluksen käyttö, esim. napin painaminen aiheuttaa tarpeen tilan muutokseen, tehdään tilanmuutos actonin avulla. Tämä taas aiheuttaa uuden näytön renderöitymisen:</p>\n<p><img src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png\"></p>\n<p>Flux tarjoaa siis standardin tavan sille miten ja missä sovelluksen tila pidetään sekä tavalle tehdä tilaan muutoksia.</p>\n<h3>Redux</h3>\n<p>Facebookilla on olemassa valmis toteutus Fluxille, käytämme kuitenkin saman periaatteen mukaan toimivaa, mutta hieman yksinkertaisempaa <a href=\"https://redux.js.org\">Redux</a>-kirjastoa, jota myös Facebookilla käytetään nykyään alkuperäisen Flux-toteutuksen sijaan.</p>\n<p>Tutustutaan Reduxiin tekemällä laskurin toteuttava sovellus:</p>\n<p>![]({{ \"/assets/5/10.png\" | absolute_url }})</p>\n<p>Tehdään uusi create-react-app-sovellus ja asennetaan siihen <em>redux</em> komennolla</p>\n<pre><code class=\"language-bash\">npm install redux --save\n</code></pre>\n<p>Fluxin tapaan Reduxissa sovelluksen tila talletetaan <a href=\"https://redux.js.org/basics/store\">storeen</a>.</p>\n<p>Koko sovelluksen tila talletetaan <em>yhteen</em> storen tallettamaan Javascript-objektiin. Koska sovelluksemme ei tarvitse mitään muuta tilaa kuin laskurin arvon, talletetaan se storeen suoraan. Jos sovelluksen tila olisi monipuolisempi, talletettaisiin \"eri asiat\" storessa olevaan olioon erillisinä kenttinä.</p>\n<p>Storen tilaa muutetaan <a href=\"https://redux.js.org/basics/actions\">actionien</a> avulla. Actionit ovat olioita, joilla on vähintään actionin <em>tyypin</em> määrittelevä kenttä <em>type</em>. Sovelluksessamme tarvitsemme esimerkiksi seuraavaa actionia:</p>\n<pre><code class=\"language-js\">{\n  type: 'INCREMENT';\n}\n</code></pre>\n<p>Jos actioneihin liittyy dataa, määritellään niille tarpeen vaatiessa muitakin kenttiä. Laskurisovelluksemme on kuitenkin niin yksinkertainen, että actioneille riittää pelkkä tyyppikenttä.</p>\n<p>Actionien vaikutus sovelluksen tilaan määritellään <a href=\"https://redux.js.org/basics/reducers\">reducerin</a> avulla. Käytännössä reducer on funktio, joka saa parametrikseen olemassaolevan staten tilan sekä actionin ja <em>palauttaa</em> staten uuden tilan.</p>\n<p>Määritellään nyt sovelluksellemme reduceri:</p>\n<pre><code class=\"language-js\">const counterReducer = (state, action) => {\n  if (action.type === 'INCREMENT') {\n    return state + 1;\n  } else if (action.type === 'DECREMENT') {\n    return state - 1;\n  } else if (action.type === 'ZERO') {\n    return 0;\n  }\n\n  return state;\n};\n</code></pre>\n<p>Ensimmäinen parametri on siis storessa oleva <em>tila</em>. Reducer palauttaa uuden tilan actionin tyypin mukaan.</p>\n<p>Muutetaan koodia vielä hiukan. Reducereissa on tapana käyttää if:ien sijaan <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a>-komentoa.\nMääritellään myös parametrille <em>state</em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">oletusarvoksi</a> 0. Näin reducer toimii vaikka store -tilaa ei olisi vielä alustettu.</p>\n<pre><code class=\"language-js\">const counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    case 'ZERO':\n      return 0;\n  }\n  return state;\n};\n</code></pre>\n<p>Reduceria ei ole tarkoitus kutsua koskaan suoraan sovelluksen koodista. Reducer ainoastaan annetaan parametrina storen luovalle <em>createStore</em>-funktiolle:</p>\n<pre><code class=\"language-js\">import { createStore } from 'redux';\n\nconst counterReducer = (state = 0, action) => {\n  // ...\n};\n\nconst store = createStore(counterReducer);\n</code></pre>\n<p>Store käyttää nyt reduceria käsitelläkseen <em>actioneja</em>, jotka <em>dispatchataan</em> eli \"lähetetään\" storelle sen <a href=\"https://redux.js.org/api-reference/store#dispatch-action\">dispatch</a>-metodilla:</p>\n<pre><code class=\"language-js\">store.dispatch({ type: 'INCREMENT' });\n</code></pre>\n<p>Storen tilan saa selville metodilla <a href=\"https://redux.js.org/api-reference/store#getstate\">getState</a>.</p>\n<p>Esim. seuraava koodi</p>\n<pre><code class=\"language-js\">const store = createStore(counterReducer);\nconsole.log(store.getState());\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nconsole.log(store.getState());\nstore.dispatch({ type: 'ZERO' });\nstore.dispatch({ type: 'DECREMENT' });\nconsole.log(store.getState());\n</code></pre>\n<p>tulostaisi konsoliin</p>\n<pre>\n0\n3\n-1\n</pre>\n<p>sillä ensin storen tila on 0. Kolmen <em>INCREMENT</em>-actionin jälkeen tila on 3, ja lopulta actionien <em>ZERO</em> ja <em>DECREMENT</em> jälkeen -1.</p>\n<p>Kolmas tärkeä metodi storella on <a href=\"https://redux.js.org/api-reference/store#subscribe-listener\">subscribe</a>, jonka avulla voidaan määritellä takaisinkutsufunktioita, joita store kutsuu sen tilan muuttumisen yhteydessä.</p>\n<p>Jos esim. lisäisimme seuraavan funktion subscribellä, tulostuisi <em>jokainen storen muutos</em> konsoliin.</p>\n<pre><code class=\"language-js\">store.subscribe(() => {\n  const storeNow = store.getState();\n  console.log(storeNow);\n});\n</code></pre>\n<p>eli koodi</p>\n<pre><code class=\"language-js\">const store = createStore(counterReducer);\n\nstore.subscribe(() => {\n  const storeNow = store.getState();\n  console.log(storeNow);\n});\n\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'INCREMENT' });\nstore.dispatch({ type: 'ZERO' });\nstore.dispatch({ type: 'DECREMENT' });\n</code></pre>\n<p>aiheuttaisi tulostuksen</p>\n<pre>\n1\n2\n3\n0\n-1\n</pre>\n<p>Laskurisovelluksemme koodi on seuraavassa. Kaikki koodi on kirjoitettu samaan tiedostoon, jolloin <em>store</em> on suoraan React-koodin käytettävissä. Tutustumme React/Redux-koodin parempiin strukturointitapoihin myöhemmin.</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {createStore} from 'redux'\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    case 'ZERO':\n      return 0\n  }\n  return state\n}\n\nconst store = createStore(counterReducer)\n\nclass App extends React.Component {\n  render() {\n    return(\n      &#x3C;div>\n        &#x3C;div>\n          {store.getState()}\n        &#x3C;/div>\n        &#x3C;button onClick={e => store.dispatch({ type: 'INCREMENT'})}>\n          plus\n        &#x3C;/button>\n        &#x3C;button onClick={e => store.dispatch({ type: 'DECREMENT' })}>\n          minus\n        &#x3C;/button>\n        &#x3C;button onClick={e => store.dispatch({ type: 'ZERO' })}>\n          zero\n        &#x3C;/button>\n      &#x3C;/div>\n    )\n  }\n}\n\nconst renderApp = () => {\n  ReactDOM.render(&#x3C;App />, document.getElementById('root'))\n}\n\nrenderApp()\nstore.subscribe(renderApp)\n</code></pre>\n<p>Koodissa on pari huomionarvoista seikkaa. <em>App</em> renderöi laskurin arvon kysymällä sitä storesta metodilla <em>store.getState()</em>. Nappien tapahtumankäsittelijät <em>dispatchaavat</em> suoraan oikean tyyppiset actionit storelle.</p>\n<p>Kun storessa olevan tilan arvo muuttuu, ei React osaa automaattisesti renderöidä sovellusta uudelleen. Olemmekin rekisteröineet koko sovelluksen renderöinnin suorittavan funktion <em>renderApp</em> kuuntelemaan storen muutoksia metodilla <em>store.subscribe</em>. Huomaa, että joudumme kutsumaan heti alussa metodia <em>renderApp()</em>, ilman kutsua sovelluksen ensimmäistä renderöintiä ei koskaan tapahdu.</p>\n<h2>Redux-muistiinpanot</h2>\n<p>Tavoitteenamme on muuttaa muistiinpanosovellus käyttämään tilanhallintaan reduxia. Katsotaan kuitenkin ensin eräitä konsepteja hieman yksinkertaistetun muistiinpanosovelluksen kautta.</p>\n<p>Sovelluksen ensimmäinen versio seuraavassa</p>\n<pre><code class=\"language-react\">const noteReducer = (state = [], action) => {\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.data)\n    return state\n  }\n\n  return state\n}\n\nconst store = createStore(noteReducer)\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  data: {\n    content: 'sovelluksen tila talletetaan storeen',\n    important: true,\n    id: 1\n  }\n})\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  data: {\n    content: 'tilanmuutokset tehdään actioneilla',\n    important: false,\n    id: 2\n  }\n})\n\nclass App extends React.Component {\n  render() {\n    return(\n      &#x3C;div>\n        &#x3C;ul>\n          {store.getState().map(note=>\n            &#x3C;li key={note.id}>\n              {note.content} &#x3C;strong>{note.important ? 'tärkeä' : ''}&#x3C;/strong>\n            &#x3C;/li>\n          )}\n         &#x3C;/ul>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p>Toistaiseksi sovelluksessa ei siis ole toiminnallisuutta uusien muistiinpanojen lisäämiseen, voimme kuitenkin tehdä sen dispatchaamalla <em>NEW</em>NOTE_-tyyppisiä actioneja koodista.</p>\n<p>Actioneissa on nyt tyypin lisäksi kenttä <em>data</em>, joka sisältää lisättävän muistiinpanon:</p>\n<pre><code class=\"language-js\">{\n  type: 'NEW_NOTE',\n  data: {\n    content: 'tilanmuutokset tehdään actioneilla',\n    important: false,\n    id: 2\n  }\n}\n</code></pre>\n<h3>puhtaat funktiot, immutable</h3>\n<p>Reducerimme alustava versio on yksinkertainen:</p>\n<pre><code class=\"language-js\">const noteReducer = (state = [], action) => {\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.data);\n    return state;\n  }\n\n  return state;\n};\n</code></pre>\n<p>Tila on nyt taulukko. <em>NEW</em>NOTE<em>-tyyppisen actionin seurauksena tilaan lisätään uusi muistiinpano metodilla [push](<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global</a></em>Objects/Array/push).</p>\n<p>Sovellus näyttää toimivan, mutta määrittelemämme reduceri on huono, se rikkoo Reactin reducerien <a href=\"https://github.com/reactjs/redux/blob/master/docs/basics/Reducers.md#handling-actions\">perusolettamusta</a> siitä, että reducerien tulee olla <a href=\"https://en.wikipedia.org/wiki/Pure_function\">puhtaita funktioita</a>.</p>\n<p>Puhtaat funktiot ovat sellaisia, että ne <em>eivät aiheuta mitään sivuvaikutuksia</em> ja niiden tulee aina palauttaa sama vastaus samoilla parametreilla kutsuttaessa.</p>\n<p>Lisäsimme tilaan uuden muistiinpanon metodilla <em>state.push(action.data)</em> joka <em>muuttaa</em> state-olion tilaa. Tämä ei ole sallittua. Ongelma korjautuu helposti käyttämällä metodia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>, joka luo <em>uuden taulukon</em>, jonka sisältönä on vanhan taulukon alkiot sekä lisättävä alkio:</p>\n<pre><code class=\"language-js\">const noteReducer = (state = [], action) => {\n  if (action.type === 'NEW_NOTE') {\n    return state.concat(action.data);\n  }\n\n  return state;\n};\n</code></pre>\n<p>Reducen tilan tulee koostua muuttumattomista eli <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a> olioista. Jos tilaan tulee muutos, ei vanhaa oliota muuteta, vaan se <em>korvataan uudella muuttuneella oliolla</em>. Juuri näin toimimme uudistuneessa reducerissa, vanha taulukko korvaantuu uudella.</p>\n<p>Laajennetaan reduceria siten, että se osaa käsitellä muistiinpanon tärkeyteen liittyvän muutoksen:</p>\n<pre><code class=\"language-js\">{\n  type: 'TOGGLE_IMPORTANCE',\n  data: {\n    id: 2\n  }\n}\n</code></pre>\n<p>Koska meillä ei ole vielä koodia joka käyttää ominaisuutta, laajennetaan reduceria testivetoisesti. Aloitetaan tekemällä testi actionin <em>NEW</em>NOTE_ käsittelylle.</p>\n<p>Jotta testaus olisi helpompaa, siirretään reducerin koodi ensin omaan moduuliinsa tiedostoon <em>src/noteReducer.js</em>. Otetaan käyttöön myös kirjasto <a href=\"https://github.com/substack/deep-freeze\">deep-freeze</a>, jonka avulla voimme varmistaa, että reducer on määritelty oikeaoppisesti puhtaana funktiona. Asennetaan kirjasto kehitysaikaiseksi riippuvuudeksi</p>\n<pre><code class=\"language-js\">npm install --save-dev deep-freeze\n</code></pre>\n<p>Testi on seuraavassa:</p>\n<pre><code class=\"language-js\">import noteReducer from './noteReducer';\nimport deepFreeze from 'deep-freeze';\n\ndescribe('noteReducer', () => {\n  it('returns new state with action NEW_NOTE', () => {\n    const state = [];\n    const action = {\n      type: 'NEW_NOTE',\n      data: {\n        content: 'sovelluksen tila talletetaan storeen',\n        important: true,\n        id: 1,\n      },\n    };\n\n    deepFreeze(state);\n    const newState = noteReducer(state, action);\n\n    expect(newState.length).toBe(1);\n    expect(newState).toContainEqual(action.data);\n  });\n});\n</code></pre>\n<p>Komento <em>deepFreeze(state)</em> varmistaa, että reducer ei muuta parametrina olevaa storen tilaa. Jos reduceri käyttää state:n manipulointiin komentoa <em>push</em>, testi ei mene läpi</p>\n<p>![]({{ \"/assets/5/11.png\" | absolute_url }})</p>\n<p>Tehdään sitten testi actionin <em>TOGGLE</em>IMPORTANCE_ käsittelylle:</p>\n<pre><code class=\"language-js\">it('returns new state with action TOGGLE_IMPORTANCE', () => {\n  const state = [\n    {\n      content: 'sovelluksen tila talletetaan storeen',\n      important: true,\n      id: 1,\n    },\n    {\n      content: 'tilanmuutokset tehdään actioneilla',\n      important: false,\n      id: 2,\n    },\n  ];\n\n  const action = {\n    type: 'TOGGLE_IMPORTANCE',\n    data: {\n      id: 2,\n    },\n  };\n\n  deepFreeze(state);\n  const newState = noteReducer(state, action);\n\n  expect(newState.length).toBe(2);\n\n  expect(newState).toContainEqual(state[0]);\n\n  expect(newState).toContainEqual({\n    content: 'tilanmuutokset tehdään actioneilla',\n    important: true,\n    id: 2,\n  });\n});\n</code></pre>\n<p>Reduceri laajenee seuraavasti</p>\n<pre><code class=\"language-js\">const noteReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'NEW_NOTE':\n      return state.concat(action.data);\n    case 'TOGGLE_IMPORTANCE':\n      const id = action.data.id;\n      const noteToChange = state.find(n => n.id === id);\n      const changedNote = {\n        ...noteToChange,\n        important: !noteToChange.important,\n      };\n      return state.map(note => (note.id !== id ? note : changedNote));\n    default:\n      return state;\n  }\n};\n</code></pre>\n<p>Luomme tärkeyttä muuttaneesta muistiinpanosta kopion osasta 2 <a href=\"/osa2#muistiinpanon-t%C3%A4rkeyden-muutos\">tutulla syntaksilla</a> ja korvaamme tilan uudella tilalla, mihin otetaan muuttumattomat muistiinpanot ja muutettavasta sen muutettu kopio <em>changedNote</em>.</p>\n<h3>array spread -syntaksi</h3>\n<p>Koska reducerilla on nyt suhteellisen hyvät testit, voimme refaktoroida koodia turvallisesti.</p>\n<p>Uuden muistiinpanon lisäys luo palautettavan tilan taulukon <em>concat</em>-funktiolla. Katsotaan nyt miten voimme toteuttaa saman hyödyntämällä Javascriptin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">array spread</a> -syntaksia:</p>\n<pre><code class=\"language-js\">const noteReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'NEW_NOTE':\n      return [...state, action.data];\n    case 'TOGGLE_IMPORTANCE':\n    // ...\n    default:\n      return state;\n  }\n};\n</code></pre>\n<p>Spread-syntaksi toimii seuraavasti. Jos määrittelemme</p>\n<pre><code class=\"language-js\">const luvut = [1, 2, 3];\n</code></pre>\n<p>niin <code>...luvut</code> hajottaa taulukon yksittäisiksi alkioiksi, eli voimme sijoittaa sen esim, toisen taulukon sisään:</p>\n<pre><code class=\"language-js\">[...luvut, 4, 5];\n</code></pre>\n<p>ja lopputuloksena on taulukko, jonka sisältö on <em>[1, 2, 3, 4, 5]</em>.</p>\n<p>Jos olisimme sijoittaneet taulukon toisen sisälle ilman spreadia, eli</p>\n<pre><code class=\"language-js\">[luvut, 4, 5];\n</code></pre>\n<p>lopputulos olisi ollut <em>[ [1, 2, 3], 4, 5]</em>.</p>\n<p>Samannäköinen syntaksi toimii taulukosta <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destrukturoimalla</a> alkioita otettaessa siten, että se <em>kerää</em> loput alkiot:</p>\n<pre><code class=\"language-js\">const luvut = [1, 2, 3, 4, 5, 6];\n\nconst [eka, toka, ...loput] = luvut;\n\nconsole.log(eka); // tulostuu 1\nconsole.log(toka); // tulostuu 2\nconsole.log(loput); // tulostuu [3, 4, 5, 6]\n</code></pre>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#redux-unicafe\">5.17 ja 5.18</a></p>\n<h3>Lisää toiminnallisuutta ja ei-kontrolloitu lomake</h3>\n<p>Lisätään sovellukseen mahdollisuus uusien muistiinpanojen tekemiseen sekä tärkeyden muuttamiseen:</p>\n<pre><code class=\"language-react\">const generateId = () => Number((Math.random() * 1000000).toFixed(0))\n\nclass App extends React.Component {\n  addNote = (event) => {\n    event.preventDefault()\n    const content = event.target.note.value\n    store.dispatch({\n      type: 'NEW_NOTE',\n      data: {\n        content: content,\n        important: false,\n        id: generateId()\n      }\n    })\n    event.target.note.value = ''\n  }\n  toggleImportance = (id) => () => {\n    store.dispatch({\n      type: 'TOGGLE_IMPORTANCE',\n      data: { id }\n    })\n  }\n  render() {\n    return(\n      &#x3C;div>\n        &#x3C;form onSubmit={this.addNote}>\n          &#x3C;input name=\"note\" />\n          &#x3C;button type=\"submit\">lisää&#x3C;/button>\n        &#x3C;/form>\n        &#x3C;ul>\n          {store.getState().map(note=>\n            &#x3C;li key={note.id} onClick={this.toggleImportance(note.id)}>\n              {note.content} &#x3C;strong>{note.important ? 'tärkeä' : ''}&#x3C;/strong>\n            &#x3C;/li>\n          )}\n         &#x3C;/ul>\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p>Molemmat toiminnallisuudet on toteutettu suoraviivaisesti. Huomionarvoista uuden muistiinpanon lisäämisessä on nyt se, että toisin kuin aiemmat Reactilla toteutetut lomakkeet, emme ole nyt sitoneet lomakkeen kentän arvoa komponentin <em>App</em> tilaan. React kutsuu tälläisiä lomakkeita <a href=\"https://reactjs.org/docs/uncontrolled-components.html\">ei-kontrolloiduiksi</a>.</p>\n<blockquote>\n<p>Ei-kontrolloiduilla lomakkeilla on tiettyjä rajoitteita (ne eivät esim. mahdollista lennossa annettavia validointiviestejä, lomakkeen lähetysnapin disabloimista sisällön perusteella ym...), meidän käyttötapaukseemme ne kuitenkin tällä kertaa sopivat.\nVoit halutessasi lukea aiheesta enemmän <a href=\"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\">täältä</a>.</p>\n</blockquote>\n<p>Muistiinpanon lisäämisen käsittelevä metodi on yksinkertainen, se ainoastaan dispatchaa muistiinpanon lisäävän actionin:</p>\n<pre><code class=\"language-js\">addNote = event => {\n  event.preventDefault();\n  const content = event.target.note.value;\n  store.dispatch({\n    type: 'NEW_NOTE',\n    data: {\n      content: content,\n      important: false,\n      id: generateId(),\n    },\n  });\n  event.target.note.value = '';\n};\n</code></pre>\n<p>Uuden muistiinpanon sisältö saadaan suoraan lomakkeen syötekentästä, johon kentän nimeämisen ansiosta päästään käsiksi tapahtumaolion kautta <em>event.target.note.value</em></p>\n<p>Tärkeyden muuttaminen tapahtuu klikkaamalla muistiinpanon nimeä. Käsittelijä on erittäin yksinkertainen:</p>\n<pre><code class=\"language-js\">toggleImportance = id => () => {\n  store.dispatch({\n    type: 'TOGGLE_IMPORTANCE',\n    data: { id },\n  });\n};\n</code></pre>\n<p>Kyseessä on jälleen tuttu <em>funktio, joka palauttaa funktion</em>, eli kullekin muistiinpanolle generoituu käsittelijäksi funktio, jolla on muistiinpanon yksilöllinen id. Esim. jos id olisi 12345, käsittelijä olisi seuraava:</p>\n<pre><code class=\"language-js\">() => {\n  store.dispatch({\n    type: 'TOGGLE_IMPORTANCE',\n    data: { id: 12345 },\n  });\n};\n</code></pre>\n<h3>action creatorit</h3>\n<p>Alamme huomata, että jo näinkin yksinkertaisessa sovelluksessa Reduxin käyttö yksinkertaistaa sovelluksen ulkoasusta vastaavaa koodia melkoisesti. React-komponenttien on oikeastaan tarpeetonta tuntea reduxin actionien tyyppejä ja esitysmuotoja. Eristetään ne erilliseen olioon, jonka metodit ovat <a href=\"https://redux.js.org/advanced/async-actions#synchronous-action-creators\">action creatoreja</a>:</p>\n<pre><code class=\"language-js\">const actionFor = {\n  noteCreation(content) {\n    return {\n      type: 'NEW_NOTE',\n      data: {\n        content,\n        important: false,\n        id: generateId(),\n      },\n    };\n  },\n  importanceToggling(id) {\n    return {\n      type: 'TOGGLE_IMPORTANCE',\n      data: { id },\n    };\n  },\n};\n</code></pre>\n<p>Komponentin <em>App</em> ei tarvitse enää tietää mitään actionien sisäisestä esitystavasta:</p>\n<pre><code class=\"language-js\">class App extends React.Component {\n  addNote = event => {\n    event.preventDefault();\n    store.dispatch(actionFor.noteCreation(event.target.note.value));\n    event.target.note.value = '';\n  };\n  toggleImportance = id => () => {\n    store.dispatch(actionFor.importanceToggling(id));\n  };\n\n  // ...\n}\n</code></pre>\n<h3>staten välittäminen propseissa ja contextissa</h3>\n<p>Sovelluksemme on reduceria lukuunottamatta tehty samaan tiedostoon. Kyseessä ei tietenkään ole järkevä käytäntö, eli on syytä eriyttää <em>App</em> omaan moduuliinsa.</p>\n<p>Herää kuitenkin kysymys miten <em>App</em> pääsee muutoksen jälkeen käsiksi <em>storeen</em>? Ja yleisemminkin, kun komponentti koostuu suuresta määrästä komponentteja, tulee olla jokin mekanismi, minkä avulla komponentit pääsevät käsiksi storeen.</p>\n<p>Tapoja on muutama, käsitellään tässä osassa kahta helpoimmin ymmärrettävää. Parhaan tavan eli kirjaston React-redux määrittelevän <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect</a>-metodin säästämme seuraavaan osaan, sillä se on hieman abstrakti ja on kenties hyvä totutella Reduxiin aluksi ilman connectin tuomia käsitteellisiä haasteita.</p>\n<p>Yksinkertaisin vaihtoehto on välittää store propsien avulla. Sovelluksen käynnistyspiste <em>index.js</em> typistyy seuraavasti</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport App from './App'\nimport noteReducer from './noteReducer'\n\nconst store = createStore(noteReducer)\n\nconst render = () => {\n  ReactDOM.render(&#x3C;App store={store}/>,\n  document.getElementById('root'))\n}\n\nrender()\nstore.subscribe(render)\n</code></pre>\n<p>Muutos omaan moduuliinsa eriytettyyn komponenttiin <em>App</em> on pieni, storeen viitataan <em>propsien</em> kautta <code>this.props.store</code>:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport actionFor from './actionCreators'\n\nclass App extends React.Component {\n  addNote = (event) => {\n    event.preventDefault()\n    this.props.store.dispatch(\n      actionFor.noteCreation(event.target.note.value)\n    )\n    event.target.note.value = ''\n  }\n  toggleImportance = (id) => () => {\n    this.props.store.dispatch(\n      actionFor.importanceToggling(id)\n    )\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;form onSubmit={this.addNote}>\n          &#x3C;input name=\"note\" />\n          &#x3C;button type=\"submit\">lisää&#x3C;/button>\n        &#x3C;/form>\n        &#x3C;ul>\n          {this.props.store.getState().map(note =>\n            &#x3C;li key={note.id} onClick={this.toggleImportance(note.id)}>\n              {note.content} &#x3C;strong>{note.important ? 'tärkeä' : ''}&#x3C;/strong>\n            &#x3C;/li>\n          )}\n        &#x3C;/ul>\n      &#x3C;/div>\n    )\n  }\n}\n\nexport default App\n</code></pre>\n<p>Jos sovelluksessa on enemmän storea tarvitsevia komponentteja, tulee <em>App</em>-komponentin välittää <em>store</em> propseina kaikille sitä tarvitseville komponenteille.</p>\n<p>Eriytetään uuden muistiinpanon luominen sekä muistiinpanojen lista ja yksittäisen muistiinpanon esittäminen omiksi komponenteiksi:</p>\n<pre><code class=\"language-react\">class NoteForm extends React.Component {\n  addNote = (event) => {\n    event.preventDefault()\n    this.props.store.dispatch(\n      actionFor.noteCreation(event.target.note.value)\n    )\n    event.target.note.value = ''\n  }\n  render() {\n    return(\n      &#x3C;form onSubmit={this.addNote}>\n        &#x3C;input name=\"note\" />\n        &#x3C;button>lisää&#x3C;/button>\n      &#x3C;/form>\n    )\n  }\n}\n\nconst Note = ({note, handleClick}) => {\n  return(\n    &#x3C;li onClick={handleClick}>\n      {note.content} &#x3C;strong>{note.important ? 'tärkeä' : ''}&#x3C;/strong>\n    &#x3C;/li>\n  )\n}\n\nclass NoteList extends React.Component {\n  toggleImportance = (id) => () => {\n    this.props.store.dispatch(\n      actionFor.importanceToggling(id)\n    )\n  }\n  render() {\n    return(\n      &#x3C;ul>\n        {this.props.store.getState().map(note =>\n          &#x3C;Note\n            key={note.id}\n            note={note}\n            handleClick={this.toggleImportance(note.id)}\n          />\n        )}\n      &#x3C;/ul>\n    )\n  }\n}\n</code></pre>\n<p>Komponenttiin <em>App</em> ei jää enää paljoa koodia:</p>\n<pre><code class=\"language-react\">class App extends React.Component {\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;NoteForm store={this.props.store} />\n        &#x3C;NoteList store={this.props.store} />\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p>Toisin kuin aiemmin ilman Reduxia tekemässämme React-koodissa, tapahtumankäsittelijät on nyt siirretty pois <em>App</em>-komponentista. Yksittäisen muistiinpanon renderöinnistä huolehtiva <em>Note</em> on erittäin yksinkertainen, eikä ole tietoinen siitä, että sen propsina saama tapahtumankäsittelijä dispatchaa actionin. Tälläisiä komponentteja kutsutaan Reactin terminologiassa <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">presentational</a>-komponenteiksi.</p>\n<p><em>NoteList</em> taas on sellainen mitä kutsutaan <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">container</a>-komponenteiksi, se sisältää sovelluslogiikkaa, eli määrittelee mitä <em>Note</em>-komponenttien tapahtumankäsittelijät tekevät ja koordinoi <em>presentational</em>-komponenttien, eli <em>Notejen</em> konfigurointia.</p>\n<p>Palaamme presentational/container-jakoon tarkemmin seuraavassa osassa.</p>\n<p><em>storen</em> välittäminen sitä tarvitseviin komponentteihin propsien avulla on melko ikävää. Vaikka <em>App</em> ei itse tarvitse storea, sen on otettava store vastaan, pystyäkseen välittämään sen edelleen komponenteille <em>NoteForm</em> ja <em>NoteList</em>.</p>\n<p>Tutustumme vielä tämän osan lopuksi <em>storen</em> välittämiseen Reactin <a href=\"https://reactjs.org/docs/context.html\">contextin</a> avulla.</p>\n<p>Manuaalin sanoin:</p>\n<blockquote>\n<p>In some cases, you want to pass data through the component tree without having to pass the props down manually at every level. You can do this directly in React with the powerful “context” API.</p>\n</blockquote>\n<p>Reactin Context API on vielä kokeellinen ja se voi hävitä tulevista versiosta. Contextin käyttö ei olekaan kovin suositeltavaa. Katsomme kuitenkin mistä on kyse.</p>\n<p>Asennetaan ensin contextin käyttöä helpottava <a href=\"https://github.com/reactjs/react-redux\">react-redux</a>-kirjasto sekä contextien määrittelyyn tarvittava <em>prop-types</em>:</p>\n<pre><code class=\"language-bash\">npm install react-redux prop-types --save\n</code></pre>\n<p>Muutetaan tiedostoa <em>index.js</em> seuraavasti:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport noteReducer from './noteReducer'\n\nconst store = createStore(noteReducer)\n\nconst render = () => {\n  ReactDOM.render(\n    &#x3C;Provider store={store}>\n      &#x3C;App/>\n    &#x3C;/Provider>,\n  document.getElementById('root'))\n}\n\nrender()\nstore.subscribe(render)\n</code></pre>\n<p>Komponentti <em>App</em> on sijoitettu react-redux-kirjaston tarjoavan <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store\">Provider</a> komponentin lapseksi. Store on annettu <em>Providerille</em> propsina.</p>\n<p>Provider määrittelee <em>storen</em> saataville komponentin <em>App</em> ja sen alikomponenttien <em>kontekstista</em>.</p>\n<p>Koska <em>App</em> ei tarvitse itse storea, voi sen muuttaa muotoon:</p>\n<pre><code class=\"language-react\">class App extends React.Component {\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;NoteForm />\n        &#x3C;NoteList />\n      &#x3C;/div>\n    )\n  }\n}\n</code></pre>\n<p><em>NoteList</em> muuttuu seuraavasti:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport PropTypes from 'prop-types'\nimport actionFor from '../actionCreators'\nimport Note from './Note'\n\nclass NoteList extends React.Component {\n  toggleImportance = (id) => () => {\n    this.context.store.dispatch(\n      actionFor.importanceToggling(id)\n    )\n  }\n  render() {\n    return(\n      &#x3C;ul>\n        {this.context.store.getState().map(note =>\n          &#x3C;Note\n            key={note.id}\n            note={note}\n            handleClick={this.toggleImportance(note.id)}\n          />\n        )}\n      &#x3C;/ul>\n    )\n  }\n}\n\nNoteList.contextTypes = {\n  store: PropTypes.object\n}\n</code></pre>\n<p>Muutos on siis hyvin pieni. Nyt propsien sijaan storen viite on <code>this.context.store</code>. Komponentille on myös pakko määritellä sen vastaanottaman kontekstin tyyppi:</p>\n<pre><code class=\"language-js\">NoteList.contextTypes = {\n  store: PropTypes.object,\n};\n</code></pre>\n<p>Ilman määrittelyä konteksti jää tyhjäksi.</p>\n<p>Komponenttiin <em>NoteForm</em> tehtävä muutos on samanlainen. Koska <em>Note</em> ei riipu millään tavalla <em>storesta</em>, se jää muuttumattomaksi.</p>\n<p>Tehdään sovellukseen vielä yksi parannus. Lisätään storea käyttäviin komponentteihin <em>NoteForm</em> ja <em>NoteList</em> seuraavan koodin sisältävät metodit <em>componentDidMount</em> ja <em>componentWillUnmount</em>:</p>\n<pre><code class=\"language-react\">class NoteForm extends React.Component {\n  componentDidMount() {\n    const { store } = this.context\n    this.unsubscribe = store.subscribe(() =>\n      this.forceUpdate()\n    )\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  // ...\n}\n</code></pre>\n<p>Näin komponentit rekisteröityvät kuuntelemaan storessa tapahtuvia muutoksia ja niiden tapahtuessa uudelleenrenderöimään itsensä (ja lapsikomponenttinsa) metodilla <a href=\"https://reactjs.org/docs/react-component.html#forceupdate\">forceUpdate</a>. Huomaa, että <a href=\"https://redux.js.org/api-reference/store#arguments-1\">subscribe palauttaa funktion</a>, jolla voidaan peruuttaa rekisteröityminen. Tässä viite siihen funktioon on tallessa muuttujassa <em>unsubscribe</em>, joten voidaan kutsua sitä sopivalla hetkellä lifecycle-metodissa <a href=\"https://reactjs.org/docs/react-component.html#componentwillunmount\">componentWillUnmount</a>.</p>\n<p>Nyt pääsemme eroon tiedostossa <em>index.js</em> tapahtuneesta koko sovelluksen uudelleenrenderöinnistä ja koodi yksinkertaistuu muotoon:</p>\n<pre><code class=\"language-react\">ReactDOM.render(\n  &#x3C;Provider store={createStore(noteReducer)}>\n    &#x3C;App />\n  &#x3C;/Provider>,\n  document.getElementById('root')\n)\n</code></pre>\n<p>Redux-sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part5-6\">githubissa</a>, tagissa <em>part5-6</em>.</p>\n<p>Egghead.io:ssa on ilmaiseksi saatavilla Reduxin kehittäjän Dan Abramovin loistava tutoriaali <a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting started with Redux</a>. Neljässä viimeisessä videossa käytettävää <em>connect</em>-metodia käsittelemme vasta kurssin seuraavassa osassa.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#redux-anekdootit\">5.19-5.21</a></p>","frontmatter":{"path":"/osa5/","title":"osa 5","mainImage":"./images/osa5.png"}}},"pageContext":{}}